"use strict";(self["webpackChunkd1"]=self["webpackChunkd1"]||[]).push([[443],{48622:function(e,t,n){var i=n(85811),r=n(9352),o=["bar3D","line3D","map3D","scatter3D","surface","lines3D","scatterGL","scatter3D"];function a(e,t){if(e&&e[t]&&(e[t].normal||e[t].emphasis)){var n=e[t].normal,i=e[t].emphasis;n&&(e[t]=n),i&&(e.emphasis=e.emphasis||{},e.emphasis[t]=i)}}function s(e){a(e,"itemStyle"),a(e,"lineStyle"),a(e,"areaStyle"),a(e,"label")}function l(e){e&&(e instanceof Array||(e=[e]),i.ZS.each(e,(function(e){if(e.axisLabel){var t=e.axisLabel;Object.assign(t,t.textStyle),t.textStyle=null}})))}function c(e){i.ZS.each(e.series,(function(t){i.ZS.indexOf(o,t.type)>=0&&(s(t),"mapbox"===t.coordinateSystem&&(t.coordinateSystem="mapbox3D",e.mapbox3D=e.mapbox))})),l(e.xAxis3D),l(e.yAxis3D),l(e.zAxis3D),l(e.grid3D),a(e.geo3D)}function u(e){this._layers={},this._zr=e}u.prototype.update=function(e,t){var n=this,o=t.getZr();if(o.getWidth()&&o.getHeight()){for(var a in this._layers)this._layers[a].removeViewsAll();e.eachComponent((function(n,i){if("series"!==n){var r=t.getViewOfComponentModel(i),o=i.coordinateSystem;if(r.__ecgl__){if(o){if(!o.viewGL)return void console.error("Can't find viewGL in coordinateSystem of component "+i.id);a=o.viewGL}else{if(!i.viewGL)return void console.error("Can't find viewGL of component "+i.id);a=o.viewGL}var a=o.viewGL,c=s(i);c.addView(a),r.afterRender&&r.afterRender(i,e,t,c),l(r.groupGL,i.get("silent"))}}})),e.eachSeries((function(n){var i=t.getViewOfSeriesModel(n),r=n.coordinateSystem;if(i.__ecgl__){if(r&&!r.viewGL&&!i.viewGL)return void console.error("Can't find viewGL of series "+i.id);var o=r&&r.viewGL||i.viewGL,a=s(n);a.addView(o),i.afterRender&&i.afterRender(n,e,t,a),l(i.groupGL,n.get("silent"))}}))}else console.warn("Dom has no width or height");function s(e){var t;o.setSleepAfterStill(0),t=(e.coordinateSystem&&e.coordinateSystem.model,e.get("zlevel"));var a=n._layers,s=a[t];if(!s){if(s=a[t]=new r.A("gl-"+t,o),o.painter.isSingleCanvas()){s.virtual=!0;var l=new i.fA._V({z:1e4,style:{image:s.renderer.canvas},silent:!0});s.__hostImage=l,o.add(l)}o.painter.insertLayer(t,s)}return s.__hostImage&&s.__hostImage.setStyle({width:s.renderer.getWidth(),height:s.renderer.getHeight()}),s}function l(e,t){e&&e.traverse((function(e){e.isRenderable&&e.isRenderable()&&(e.ignorePicking=null!=e.$ignorePicking?e.$ignorePicking:t)}))}},i.cf((function(e){var t=e.getZr(),n=t.painter.dispose;t.painter.dispose=function(){"function"===typeof this.eachOtherLayer&&this.eachOtherLayer((function(e){e instanceof r.A&&e.dispose()})),n.call(this)},t.painter.getRenderedCanvas=function(e){if(e=e||{},this._singleCanvas)return this._layers[0].dom;var t=document.createElement("canvas"),n=e.pixelRatio||this.dpr;t.width=this.getWidth()*n,t.height=this.getHeight()*n;var i=t.getContext("2d");i.dpr=n,i.clearRect(0,0,t.width,t.height),e.backgroundColor&&(i.fillStyle=e.backgroundColor,i.fillRect(0,0,t.width,t.height));var r,o=this.storage.getDisplayList(!0),a={},s=this;function l(e,t){var n,r=s._zlevelList;null==e&&(e=-1/0);for(var o=0;o<r.length;o++){var a=r[o],l=s._layers[a];if(!l.__builtin__&&a>e&&a<t){n=l;break}}n&&n.renderToCanvas&&(i.save(),n.renderToCanvas(i),i.restore())}for(var c={ctx:i},u=0;u<o.length;u++){var h=o[u];h.zlevel!==r&&(l(r,h.zlevel),r=h.zlevel),this._doPaintEl(h,c,!0,null,a)}return l(r,1/0),t}})),i.tb((function(e,t){var n=t.getZr(),i=n.__egl=n.__egl||new u(n);i.update(e,t)})),i.lP(c)},94521:function(e,t,n){n.d(t,{A:function(){return Y}});n(16573),n(78100),n(77936),n(37467),n(44732),n(79577);var i=n(50296),r=n(33672),o=n(68718),a=n(87322),s=n(14276),l=n(21647),c=n(504),u=n(74998),h=n(40144),f="@export ecgl.ssao.estimate\n\nuniform sampler2D depthTex;\n\nuniform sampler2D normalTex;\n\nuniform sampler2D noiseTex;\n\nuniform vec2 depthTexSize;\n\nuniform vec2 noiseTexSize;\n\nuniform mat4 projection;\n\nuniform mat4 projectionInv;\n\nuniform mat4 viewInverseTranspose;\n\nuniform vec3 kernel[KERNEL_SIZE];\n\nuniform float radius : 1;\n\nuniform float power : 1;\n\nuniform float bias: 1e-2;\n\nuniform float intensity: 1.0;\n\nvarying vec2 v_Texcoord;\n\nfloat ssaoEstimator(in vec3 originPos, in mat3 kernelBasis) {\n float occlusion = 0.0;\n\n for (int i = 0; i < KERNEL_SIZE; i++) {\n vec3 samplePos = kernel[i];\n#ifdef NORMALTEX_ENABLED\n samplePos = kernelBasis * samplePos;\n#endif\n samplePos = samplePos * radius + originPos;\n\n vec4 texCoord = projection * vec4(samplePos, 1.0);\n texCoord.xy /= texCoord.w;\n\n vec4 depthTexel = texture2D(depthTex, texCoord.xy * 0.5 + 0.5);\n\n float sampleDepth = depthTexel.r * 2.0 - 1.0;\n if (projection[3][3] == 0.0) {\n sampleDepth = projection[3][2] / (sampleDepth * projection[2][3] - projection[2][2]);\n }\n else {\n sampleDepth = (sampleDepth - projection[3][2]) / projection[2][2];\n }\n \n float rangeCheck = smoothstep(0.0, 1.0, radius / abs(originPos.z - sampleDepth));\n occlusion += rangeCheck * step(samplePos.z, sampleDepth - bias);\n }\n#ifdef NORMALTEX_ENABLED\n occlusion = 1.0 - occlusion / float(KERNEL_SIZE);\n#else\n occlusion = 1.0 - clamp((occlusion / float(KERNEL_SIZE) - 0.6) * 2.5, 0.0, 1.0);\n#endif\n return pow(occlusion, power);\n}\n\nvoid main()\n{\n\n vec4 depthTexel = texture2D(depthTex, v_Texcoord);\n\n#ifdef NORMALTEX_ENABLED\n vec4 tex = texture2D(normalTex, v_Texcoord);\n if (dot(tex.rgb, tex.rgb) == 0.0) {\n gl_FragColor = vec4(1.0);\n return;\n }\n vec3 N = tex.rgb * 2.0 - 1.0;\n N = (viewInverseTranspose * vec4(N, 0.0)).xyz;\n\n vec2 noiseTexCoord = depthTexSize / vec2(noiseTexSize) * v_Texcoord;\n vec3 rvec = texture2D(noiseTex, noiseTexCoord).rgb * 2.0 - 1.0;\n vec3 T = normalize(rvec - N * dot(rvec, N));\n vec3 BT = normalize(cross(N, T));\n mat3 kernelBasis = mat3(T, BT, N);\n#else\n if (depthTexel.r > 0.99999) {\n gl_FragColor = vec4(1.0);\n return;\n }\n mat3 kernelBasis;\n#endif\n\n float z = depthTexel.r * 2.0 - 1.0;\n\n vec4 projectedPos = vec4(v_Texcoord * 2.0 - 1.0, z, 1.0);\n vec4 p4 = projectionInv * projectedPos;\n\n vec3 position = p4.xyz / p4.w;\n\n float ao = ssaoEstimator(position, kernelBasis);\n ao = clamp(1.0 - (1.0 - ao) * intensity, 0.0, 1.0);\n gl_FragColor = vec4(vec3(ao), 1.0);\n}\n\n@end\n\n\n@export ecgl.ssao.blur\n#define SHADER_NAME SSAO_BLUR\n\nuniform sampler2D ssaoTexture;\n\n#ifdef NORMALTEX_ENABLED\nuniform sampler2D normalTex;\n#endif\n\nvarying vec2 v_Texcoord;\n\nuniform vec2 textureSize;\nuniform float blurSize : 1.0;\n\nuniform int direction: 0.0;\n\n#ifdef DEPTHTEX_ENABLED\nuniform sampler2D depthTex;\nuniform mat4 projection;\nuniform float depthRange : 0.5;\n\nfloat getLinearDepth(vec2 coord)\n{\n float depth = texture2D(depthTex, coord).r * 2.0 - 1.0;\n return projection[3][2] / (depth * projection[2][3] - projection[2][2]);\n}\n#endif\n\nvoid main()\n{\n float kernel[5];\n kernel[0] = 0.122581;\n kernel[1] = 0.233062;\n kernel[2] = 0.288713;\n kernel[3] = 0.233062;\n kernel[4] = 0.122581;\n\n vec2 off = vec2(0.0);\n if (direction == 0) {\n off[0] = blurSize / textureSize.x;\n }\n else {\n off[1] = blurSize / textureSize.y;\n }\n\n vec2 coord = v_Texcoord;\n\n float sum = 0.0;\n float weightAll = 0.0;\n\n#ifdef NORMALTEX_ENABLED\n vec3 centerNormal = texture2D(normalTex, v_Texcoord).rgb * 2.0 - 1.0;\n#endif\n#if defined(DEPTHTEX_ENABLED)\n float centerDepth = getLinearDepth(v_Texcoord);\n#endif\n\n for (int i = 0; i < 5; i++) {\n vec2 coord = clamp(v_Texcoord + vec2(float(i) - 2.0) * off, vec2(0.0), vec2(1.0));\n\n float w = kernel[i];\n#ifdef NORMALTEX_ENABLED\n vec3 normal = texture2D(normalTex, coord).rgb * 2.0 - 1.0;\n w *= clamp(dot(normal, centerNormal), 0.0, 1.0);\n#endif\n#ifdef DEPTHTEX_ENABLED\n float d = getLinearDepth(coord);\n w *= (1.0 - smoothstep(abs(centerDepth - d) / depthRange, 0.0, 1.0));\n#endif\n\n weightAll += w;\n sum += texture2D(ssaoTexture, coord).r * w;\n }\n\n gl_FragColor = vec4(vec3(sum / weightAll), 1.0);\n}\n\n@end\n";function d(e){for(var t=new Uint8Array(e*e*4),n=0,i=new c.A,r=0;r<e;r++)for(var o=0;o<e;o++)i.set(2*Math.random()-1,2*Math.random()-1,0).normalize(),t[n++]=255*(.5*i.x+.5),t[n++]=255*(.5*i.y+.5),t[n++]=0,t[n++]=255;return t}function m(e){return new r.A({pixels:d(e),wrapS:o.A.REPEAT,wrapT:o.A.REPEAT,width:e,height:e})}function p(e,t,n){var i=new Float32Array(3*e);t=t||0;for(var r=0;r<e;r++){var o=(0,h.A)(r+t,2)*(n?1:2)*Math.PI,a=(0,h.A)(r+t,3)*Math.PI,s=Math.random(),l=Math.cos(o)*Math.sin(a)*s,c=Math.cos(a)*s,u=Math.sin(o)*Math.sin(a)*s;i[3*r]=l,i[3*r+1]=c,i[3*r+2]=u}return i}function _(e){e=e||{},this._ssaoPass=new u.A({fragment:i.A.source("ecgl.ssao.estimate")}),this._blurPass=new u.A({fragment:i.A.source("ecgl.ssao.blur")}),this._framebuffer=new a.A({depthBuffer:!1}),this._ssaoTexture=new r.A,this._blurTexture=new r.A,this._blurTexture2=new r.A,this._depthTex=e.depthTexture,this._normalTex=e.normalTexture,this.setNoiseSize(4),this.setKernelSize(e.kernelSize||12),null!=e.radius&&this.setParameter("radius",e.radius),null!=e.power&&this.setParameter("power",e.power),this._normalTex||(this._ssaoPass.material.disableTexture("normalTex"),this._blurPass.material.disableTexture("normalTex")),this._depthTex||this._blurPass.material.disableTexture("depthTex"),this._blurPass.material.setUniform("normalTex",this._normalTex),this._blurPass.material.setUniform("depthTex",this._depthTex)}i.A.import(f),_.prototype.setDepthTexture=function(e){this._depthTex=e},_.prototype.setNormalTexture=function(e){this._normalTex=e,this._ssaoPass.material[e?"enableTexture":"disableTexture"]("normalTex"),this.setKernelSize(this._kernelSize)},_.prototype.update=function(e,t,n){var i=e.getWidth(),r=e.getHeight(),o=this._ssaoPass,a=this._blurPass;o.setUniform("kernel",this._kernels[n%this._kernels.length]),o.setUniform("depthTex",this._depthTex),null!=this._normalTex&&o.setUniform("normalTex",this._normalTex),o.setUniform("depthTexSize",[this._depthTex.width,this._depthTex.height]);var s=new l.A;l.A.transpose(s,t.worldTransform),o.setUniform("projection",t.projectionMatrix.array),o.setUniform("projectionInv",t.invProjectionMatrix.array),o.setUniform("viewInverseTranspose",s.array);var c=this._ssaoTexture,u=this._blurTexture,h=this._blurTexture2;c.width=i/2,c.height=r/2,u.width=i,u.height=r,h.width=i,h.height=r,this._framebuffer.attach(c),this._framebuffer.bind(e),e.gl.clearColor(1,1,1,1),e.gl.clear(e.gl.COLOR_BUFFER_BIT),o.render(e),a.setUniform("textureSize",[i/2,r/2]),a.setUniform("projection",t.projectionMatrix.array),this._framebuffer.attach(u),a.setUniform("direction",0),a.setUniform("ssaoTexture",c),a.render(e),this._framebuffer.attach(h),a.setUniform("textureSize",[i,r]),a.setUniform("direction",1),a.setUniform("ssaoTexture",u),a.render(e),this._framebuffer.unbind(e);var f=e.clearColor;e.gl.clearColor(f[0],f[1],f[2],f[3])},_.prototype.getTargetTexture=function(){return this._blurTexture2},_.prototype.setParameter=function(e,t){"noiseTexSize"===e?this.setNoiseSize(t):"kernelSize"===e?this.setKernelSize(t):"intensity"===e?this._ssaoPass.material.set("intensity",t):this._ssaoPass.setUniform(e,t)},_.prototype.setKernelSize=function(e){this._kernelSize=e,this._ssaoPass.material.define("fragment","KERNEL_SIZE",e),this._kernels=this._kernels||[];for(var t=0;t<30;t++)this._kernels[t]=p(e,t*e,!!this._normalTex)},_.prototype.setNoiseSize=function(e){var t=this._ssaoPass.getUniform("noiseTex");t?(t.data=d(e),t.width=t.height=e,t.dirty()):(t=m(e),this._ssaoPass.setUniform("noiseTex",m(e))),this._ssaoPass.setUniform("noiseTexSize",[e,e])},_.prototype.dispose=function(e){this._blurTexture.dispose(e),this._ssaoTexture.dispose(e),this._blurTexture2.dispose(e)};var v=_,g=n(74397),x="@export ecgl.ssr.main\n\n#define SHADER_NAME SSR\n#define MAX_ITERATION 20;\n#define SAMPLE_PER_FRAME 5;\n#define TOTAL_SAMPLES 128;\n\nuniform sampler2D sourceTexture;\nuniform sampler2D gBufferTexture1;\nuniform sampler2D gBufferTexture2;\nuniform sampler2D gBufferTexture3;\nuniform samplerCube specularCubemap;\nuniform float specularIntensity: 1;\n\nuniform mat4 projection;\nuniform mat4 projectionInv;\nuniform mat4 toViewSpace;\nuniform mat4 toWorldSpace;\n\nuniform float maxRayDistance: 200;\n\nuniform float pixelStride: 16;\nuniform float pixelStrideZCutoff: 50; \nuniform float screenEdgeFadeStart: 0.9; \nuniform float eyeFadeStart : 0.2; uniform float eyeFadeEnd: 0.8; \nuniform float minGlossiness: 0.2; uniform float zThicknessThreshold: 1;\n\nuniform float nearZ;\nuniform vec2 viewportSize : VIEWPORT_SIZE;\n\nuniform float jitterOffset: 0;\n\nvarying vec2 v_Texcoord;\n\n#ifdef DEPTH_DECODE\n@import clay.util.decode_float\n#endif\n\n#ifdef PHYSICALLY_CORRECT\nuniform sampler2D normalDistribution;\nuniform float sampleOffset: 0;\nuniform vec2 normalDistributionSize;\n\nvec3 transformNormal(vec3 H, vec3 N) {\n vec3 upVector = N.y > 0.999 ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0);\n vec3 tangentX = normalize(cross(N, upVector));\n vec3 tangentZ = cross(N, tangentX);\n return normalize(tangentX * H.x + N * H.y + tangentZ * H.z);\n}\nvec3 importanceSampleNormalGGX(float i, float roughness, vec3 N) {\n float p = fract((i + sampleOffset) / float(TOTAL_SAMPLES));\n vec3 H = texture2D(normalDistribution,vec2(roughness, p)).rgb;\n return transformNormal(H, N);\n}\nfloat G_Smith(float g, float ndv, float ndl) {\n float roughness = 1.0 - g;\n float k = roughness * roughness / 2.0;\n float G1V = ndv / (ndv * (1.0 - k) + k);\n float G1L = ndl / (ndl * (1.0 - k) + k);\n return G1L * G1V;\n}\nvec3 F_Schlick(float ndv, vec3 spec) {\n return spec + (1.0 - spec) * pow(1.0 - ndv, 5.0);\n}\n#endif\n\nfloat fetchDepth(sampler2D depthTexture, vec2 uv)\n{\n vec4 depthTexel = texture2D(depthTexture, uv);\n return depthTexel.r * 2.0 - 1.0;\n}\n\nfloat linearDepth(float depth)\n{\n if (projection[3][3] == 0.0) {\n return projection[3][2] / (depth * projection[2][3] - projection[2][2]);\n }\n else {\n return (depth - projection[3][2]) / projection[2][2];\n }\n}\n\nbool rayIntersectDepth(float rayZNear, float rayZFar, vec2 hitPixel)\n{\n if (rayZFar > rayZNear)\n {\n float t = rayZFar; rayZFar = rayZNear; rayZNear = t;\n }\n float cameraZ = linearDepth(fetchDepth(gBufferTexture2, hitPixel));\n return rayZFar <= cameraZ && rayZNear >= cameraZ - zThicknessThreshold;\n}\n\n\nbool traceScreenSpaceRay(\n vec3 rayOrigin, vec3 rayDir, float jitter,\n out vec2 hitPixel, out vec3 hitPoint, out float iterationCount\n)\n{\n float rayLength = ((rayOrigin.z + rayDir.z * maxRayDistance) > -nearZ)\n ? (-nearZ - rayOrigin.z) / rayDir.z : maxRayDistance;\n\n vec3 rayEnd = rayOrigin + rayDir * rayLength;\n\n vec4 H0 = projection * vec4(rayOrigin, 1.0);\n vec4 H1 = projection * vec4(rayEnd, 1.0);\n\n float k0 = 1.0 / H0.w, k1 = 1.0 / H1.w;\n\n vec3 Q0 = rayOrigin * k0, Q1 = rayEnd * k1;\n\n vec2 P0 = (H0.xy * k0 * 0.5 + 0.5) * viewportSize;\n vec2 P1 = (H1.xy * k1 * 0.5 + 0.5) * viewportSize;\n\n P1 += dot(P1 - P0, P1 - P0) < 0.0001 ? 0.01 : 0.0;\n vec2 delta = P1 - P0;\n\n bool permute = false;\n if (abs(delta.x) < abs(delta.y)) {\n permute = true;\n delta = delta.yx;\n P0 = P0.yx;\n P1 = P1.yx;\n }\n float stepDir = sign(delta.x);\n float invdx = stepDir / delta.x;\n\n vec3 dQ = (Q1 - Q0) * invdx;\n float dk = (k1 - k0) * invdx;\n\n vec2 dP = vec2(stepDir, delta.y * invdx);\n\n float strideScaler = 1.0 - min(1.0, -rayOrigin.z / pixelStrideZCutoff);\n float pixStride = 1.0 + strideScaler * pixelStride;\n\n dP *= pixStride; dQ *= pixStride; dk *= pixStride;\n\n vec4 pqk = vec4(P0, Q0.z, k0);\n vec4 dPQK = vec4(dP, dQ.z, dk);\n\n pqk += dPQK * jitter;\n float rayZFar = (dPQK.z * 0.5 + pqk.z) / (dPQK.w * 0.5 + pqk.w);\n float rayZNear;\n\n bool intersect = false;\n\n vec2 texelSize = 1.0 / viewportSize;\n\n iterationCount = 0.0;\n\n for (int i = 0; i < MAX_ITERATION; i++)\n {\n pqk += dPQK;\n\n rayZNear = rayZFar;\n rayZFar = (dPQK.z * 0.5 + pqk.z) / (dPQK.w * 0.5 + pqk.w);\n\n hitPixel = permute ? pqk.yx : pqk.xy;\n hitPixel *= texelSize;\n\n intersect = rayIntersectDepth(rayZNear, rayZFar, hitPixel);\n\n iterationCount += 1.0;\n\n dPQK *= 1.2;\n\n if (intersect) {\n break;\n }\n }\n\n Q0.xy += dQ.xy * iterationCount;\n Q0.z = pqk.z;\n hitPoint = Q0 / pqk.w;\n\n return intersect;\n}\n\nfloat calculateAlpha(\n float iterationCount, float reflectivity,\n vec2 hitPixel, vec3 hitPoint, float dist, vec3 rayDir\n)\n{\n float alpha = clamp(reflectivity, 0.0, 1.0);\n alpha *= 1.0 - (iterationCount / float(MAX_ITERATION));\n vec2 hitPixelNDC = hitPixel * 2.0 - 1.0;\n float maxDimension = min(1.0, max(abs(hitPixelNDC.x), abs(hitPixelNDC.y)));\n alpha *= 1.0 - max(0.0, maxDimension - screenEdgeFadeStart) / (1.0 - screenEdgeFadeStart);\n\n float _eyeFadeStart = eyeFadeStart;\n float _eyeFadeEnd = eyeFadeEnd;\n if (_eyeFadeStart > _eyeFadeEnd) {\n float tmp = _eyeFadeEnd;\n _eyeFadeEnd = _eyeFadeStart;\n _eyeFadeStart = tmp;\n }\n\n float eyeDir = clamp(rayDir.z, _eyeFadeStart, _eyeFadeEnd);\n alpha *= 1.0 - (eyeDir - _eyeFadeStart) / (_eyeFadeEnd - _eyeFadeStart);\n\n alpha *= 1.0 - clamp(dist / maxRayDistance, 0.0, 1.0);\n\n return alpha;\n}\n\n@import clay.util.rand\n\n@import clay.util.rgbm\n\nvoid main()\n{\n vec4 normalAndGloss = texture2D(gBufferTexture1, v_Texcoord);\n\n if (dot(normalAndGloss.rgb, vec3(1.0)) == 0.0) {\n discard;\n }\n\n float g = normalAndGloss.a;\n#if !defined(PHYSICALLY_CORRECT)\n if (g <= minGlossiness) {\n discard;\n }\n#endif\n\n float reflectivity = (g - minGlossiness) / (1.0 - minGlossiness);\n\n vec3 N = normalize(normalAndGloss.rgb * 2.0 - 1.0);\n N = normalize((toViewSpace * vec4(N, 0.0)).xyz);\n\n vec4 projectedPos = vec4(v_Texcoord * 2.0 - 1.0, fetchDepth(gBufferTexture2, v_Texcoord), 1.0);\n vec4 pos = projectionInv * projectedPos;\n vec3 rayOrigin = pos.xyz / pos.w;\n vec3 V = -normalize(rayOrigin);\n\n float ndv = clamp(dot(N, V), 0.0, 1.0);\n float iterationCount;\n float jitter = rand(fract(v_Texcoord + jitterOffset));\n\n#ifdef PHYSICALLY_CORRECT\n vec4 color = vec4(vec3(0.0), 1.0);\n vec4 albedoMetalness = texture2D(gBufferTexture3, v_Texcoord);\n vec3 albedo = albedoMetalness.rgb;\n float m = albedoMetalness.a;\n vec3 diffuseColor = albedo * (1.0 - m);\n vec3 spec = mix(vec3(0.04), albedo, m);\n\n float jitter2 = rand(fract(v_Texcoord)) * float(TOTAL_SAMPLES);\n\n for (int i = 0; i < SAMPLE_PER_FRAME; i++) {\n vec3 H = importanceSampleNormalGGX(float(i) + jitter2, 1.0 - g, N);\n vec3 rayDir = normalize(reflect(-V, H));\n#else\n vec3 rayDir = normalize(reflect(-V, N));\n#endif\n vec2 hitPixel;\n vec3 hitPoint;\n\n bool intersect = traceScreenSpaceRay(rayOrigin, rayDir, jitter, hitPixel, hitPoint, iterationCount);\n\n float dist = distance(rayOrigin, hitPoint);\n\n vec3 hitNormal = texture2D(gBufferTexture1, hitPixel).rgb * 2.0 - 1.0;\n hitNormal = normalize((toViewSpace * vec4(hitNormal, 0.0)).xyz);\n#ifdef PHYSICALLY_CORRECT\n float ndl = clamp(dot(N, rayDir), 0.0, 1.0);\n float vdh = clamp(dot(V, H), 0.0, 1.0);\n float ndh = clamp(dot(N, H), 0.0, 1.0);\n vec3 litTexel = vec3(0.0);\n if (dot(hitNormal, rayDir) < 0.0 && intersect) {\n litTexel = texture2D(sourceTexture, hitPixel).rgb;\n litTexel *= pow(clamp(1.0 - dist / 200.0, 0.0, 1.0), 3.0);\n\n }\n else {\n #ifdef SPECULARCUBEMAP_ENABLED\n vec3 rayDirW = normalize(toWorldSpace * vec4(rayDir, 0.0)).rgb;\n litTexel = RGBMDecode(textureCubeLodEXT(specularCubemap, rayDirW, 0.0), 8.12).rgb * specularIntensity;\n#endif\n }\n color.rgb += ndl * litTexel * (\n F_Schlick(ndl, spec) * G_Smith(g, ndv, ndl) * vdh / (ndh * ndv + 0.001)\n );\n }\n color.rgb /= float(SAMPLE_PER_FRAME);\n#else\n #if !defined(SPECULARCUBEMAP_ENABLED)\n if (dot(hitNormal, rayDir) >= 0.0) {\n discard;\n }\n if (!intersect) {\n discard;\n }\n#endif\n float alpha = clamp(calculateAlpha(iterationCount, reflectivity, hitPixel, hitPoint, dist, rayDir), 0.0, 1.0);\n vec4 color = texture2D(sourceTexture, hitPixel);\n color.rgb *= alpha;\n\n#ifdef SPECULARCUBEMAP_ENABLED\n vec3 rayDirW = normalize(toWorldSpace * vec4(rayDir, 0.0)).rgb;\n alpha = alpha * (intersect ? 1.0 : 0.0);\n float bias = (1.0 -g) * 5.0;\n color.rgb += (1.0 - alpha)\n * RGBMDecode(textureCubeLodEXT(specularCubemap, rayDirW, bias), 8.12).rgb\n * specularIntensity;\n#endif\n\n#endif\n\n gl_FragColor = encodeHDR(color);\n}\n@end\n\n@export ecgl.ssr.blur\n\nuniform sampler2D texture;\nuniform sampler2D gBufferTexture1;\nuniform sampler2D gBufferTexture2;\nuniform mat4 projection;\nuniform float depthRange : 0.05;\n\nvarying vec2 v_Texcoord;\n\nuniform vec2 textureSize;\nuniform float blurSize : 1.0;\n\n#ifdef BLEND\n #ifdef SSAOTEX_ENABLED\nuniform sampler2D ssaoTex;\n #endif\nuniform sampler2D sourceTexture;\n#endif\n\nfloat getLinearDepth(vec2 coord)\n{\n float depth = texture2D(gBufferTexture2, coord).r * 2.0 - 1.0;\n return projection[3][2] / (depth * projection[2][3] - projection[2][2]);\n}\n\n@import clay.util.rgbm\n\n\nvoid main()\n{\n @import clay.compositor.kernel.gaussian_9\n\n vec4 centerNTexel = texture2D(gBufferTexture1, v_Texcoord);\n float g = centerNTexel.a;\n float maxBlurSize = clamp(1.0 - g, 0.0, 1.0) * blurSize;\n#ifdef VERTICAL\n vec2 off = vec2(0.0, maxBlurSize / textureSize.y);\n#else\n vec2 off = vec2(maxBlurSize / textureSize.x, 0.0);\n#endif\n\n vec2 coord = v_Texcoord;\n\n vec4 sum = vec4(0.0);\n float weightAll = 0.0;\n\n vec3 cN = centerNTexel.rgb * 2.0 - 1.0;\n float cD = getLinearDepth(v_Texcoord);\n for (int i = 0; i < 9; i++) {\n vec2 coord = clamp((float(i) - 4.0) * off + v_Texcoord, vec2(0.0), vec2(1.0));\n float w = gaussianKernel[i]\n * clamp(dot(cN, texture2D(gBufferTexture1, coord).rgb * 2.0 - 1.0), 0.0, 1.0);\n float d = getLinearDepth(coord);\n w *= (1.0 - smoothstep(abs(cD - d) / depthRange, 0.0, 1.0));\n\n weightAll += w;\n sum += decodeHDR(texture2D(texture, coord)) * w;\n }\n\n#ifdef BLEND\n float aoFactor = 1.0;\n #ifdef SSAOTEX_ENABLED\n aoFactor = texture2D(ssaoTex, v_Texcoord).r;\n #endif\n gl_FragColor = encodeHDR(\n sum / weightAll * aoFactor + decodeHDR(texture2D(sourceTexture, v_Texcoord))\n );\n#else\n gl_FragColor = encodeHDR(sum / weightAll);\n#endif\n}\n\n@end";function A(e){e=e||{},this._ssrPass=new u.A({fragment:i.A.source("ecgl.ssr.main"),clearColor:[0,0,0,0]}),this._blurPass1=new u.A({fragment:i.A.source("ecgl.ssr.blur"),clearColor:[0,0,0,0]}),this._blurPass2=new u.A({fragment:i.A.source("ecgl.ssr.blur"),clearColor:[0,0,0,0]}),this._blendPass=new u.A({fragment:i.A.source("clay.compositor.blend")}),this._blendPass.material.disableTexturesAll(),this._blendPass.material.enableTexture(["texture1","texture2"]),this._ssrPass.setUniform("gBufferTexture1",e.normalTexture),this._ssrPass.setUniform("gBufferTexture2",e.depthTexture),this._blurPass1.setUniform("gBufferTexture1",e.normalTexture),this._blurPass1.setUniform("gBufferTexture2",e.depthTexture),this._blurPass2.setUniform("gBufferTexture1",e.normalTexture),this._blurPass2.setUniform("gBufferTexture2",e.depthTexture),this._blurPass2.material.define("fragment","VERTICAL"),this._blurPass2.material.define("fragment","BLEND"),this._ssrTexture=new r.A({type:o.A.HALF_FLOAT}),this._texture2=new r.A({type:o.A.HALF_FLOAT}),this._texture3=new r.A({type:o.A.HALF_FLOAT}),this._prevTexture=new r.A({type:o.A.HALF_FLOAT}),this._currentTexture=new r.A({type:o.A.HALF_FLOAT}),this._frameBuffer=new a.A({depthBuffer:!1}),this._normalDistribution=null,this._totalSamples=256,this._samplePerFrame=4,this._ssrPass.material.define("fragment","SAMPLE_PER_FRAME",this._samplePerFrame),this._ssrPass.material.define("fragment","TOTAL_SAMPLES",this._totalSamples),this._downScale=1}i.A.import(x),A.prototype.setAmbientCubemap=function(e,t){this._ssrPass.material.set("specularCubemap",e),this._ssrPass.material.set("specularIntensity",t);var n=e&&t;this._ssrPass.material[n?"enableTexture":"disableTexture"]("specularCubemap")},A.prototype.update=function(e,t,n,i){var r=e.getWidth(),o=e.getHeight(),a=this._ssrTexture,s=this._texture2,c=this._texture3;a.width=this._prevTexture.width=this._currentTexture.width=r/this._downScale,a.height=this._prevTexture.height=this._currentTexture.height=o/this._downScale,s.width=c.width=r,s.height=c.height=o;var u=this._frameBuffer,h=this._ssrPass,f=this._blurPass1,d=this._blurPass2,m=this._blendPass,p=new l.A,_=new l.A;l.A.transpose(p,t.worldTransform),l.A.transpose(_,t.viewMatrix),h.setUniform("sourceTexture",n),h.setUniform("projection",t.projectionMatrix.array),h.setUniform("projectionInv",t.invProjectionMatrix.array),h.setUniform("toViewSpace",p.array),h.setUniform("toWorldSpace",_.array),h.setUniform("nearZ",t.near);var v=i/this._totalSamples*this._samplePerFrame;if(h.setUniform("jitterOffset",v),h.setUniform("sampleOffset",i*this._samplePerFrame),f.setUniform("textureSize",[a.width,a.height]),d.setUniform("textureSize",[r,o]),d.setUniform("sourceTexture",n),f.setUniform("projection",t.projectionMatrix.array),d.setUniform("projection",t.projectionMatrix.array),u.attach(a),u.bind(e),h.render(e),this._physicallyCorrect&&(u.attach(this._currentTexture),m.setUniform("texture1",this._prevTexture),m.setUniform("texture2",a),m.material.set({weight1:i>=1?.95:0,weight2:i>=1?.05:1}),m.render(e)),u.attach(s),f.setUniform("texture",this._physicallyCorrect?this._currentTexture:a),f.render(e),u.attach(c),d.setUniform("texture",s),d.render(e),u.unbind(e),this._physicallyCorrect){var g=this._prevTexture;this._prevTexture=this._currentTexture,this._currentTexture=g}},A.prototype.getTargetTexture=function(){return this._texture3},A.prototype.setParameter=function(e,t){"maxIteration"===e?this._ssrPass.material.define("fragment","MAX_ITERATION",t):this._ssrPass.setUniform(e,t)},A.prototype.setPhysicallyCorrect=function(e){e?(this._normalDistribution||(this._normalDistribution=g.A.generateNormalDistribution(64,this._totalSamples)),this._ssrPass.material.define("fragment","PHYSICALLY_CORRECT"),this._ssrPass.material.set("normalDistribution",this._normalDistribution),this._ssrPass.material.set("normalDistributionSize",[64,this._totalSamples])):this._ssrPass.material.undefine("fragment","PHYSICALLY_CORRECT"),this._physicallyCorrect=e},A.prototype.setSSAOTexture=function(e){var t=this._blurPass2;e?(t.material.enableTexture("ssaoTex"),t.material.set("ssaoTex",e)):t.material.disableTexture("ssaoTex")},A.prototype.isFinished=function(e){return!this._physicallyCorrect||e>this._totalSamples/this._samplePerFrame},A.prototype.dispose=function(e){this._ssrTexture.dispose(e),this._texture2.dispose(e),this._texture3.dispose(e),this._prevTexture.dispose(e),this._currentTexture.dispose(e),this._frameBuffer.dispose(e)};var T=A,y=[0,0,-.321585265978,-.154972575841,.458126042375,.188473391593,.842080129861,.527766490688,.147304551086,-.659453822776,-.331943915203,-.940619700594,.0479226680259,.54812163202,.701581552186,-.709825561388,-.295436780218,.940589268233,-.901489676764,.237713156085,.973570876096,-.109899459384,-.866792314779,-.451805525005,.330975007087,.800048655954,-.344275183665,.381779221166,-.386139432542,-.437418421534,-.576478634965,-.0148463392551,.385798197415,-.262426961053,-.666302061145,.682427250835,-.628010632582,-.732836215494,.10163141741,-.987658134403,.711995289051,-.320024291314,.0296005138058,.950296523438,.0130612307608,-.351024443122,-.879596633704,-.10478487883,.435712737232,.504254490347,.779203817497,.206477676721,.388264289969,-.896736162545,-.153106280781,-.629203242522,-.245517550697,.657969239148,.126830499058,.26862328493,-.634888119007,-.302301223431,.617074219636,.779817204925],b=n(9489),w=n(5148),N=n(15501),C="@export ecgl.normal.vertex\n\n@import ecgl.common.transformUniforms\n\n@import ecgl.common.uv.header\n\n@import ecgl.common.attributes\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\n@import ecgl.common.normalMap.vertexHeader\n\n@import ecgl.common.vertexAnimation.header\n\nvoid main()\n{\n\n @import ecgl.common.vertexAnimation.main\n\n @import ecgl.common.uv.main\n\n v_Normal = normalize((worldInverseTranspose * vec4(normal, 0.0)).xyz);\n v_WorldPosition = (world * vec4(pos, 1.0)).xyz;\n\n @import ecgl.common.normalMap.vertexMain\n\n gl_Position = worldViewProjection * vec4(pos, 1.0);\n\n}\n\n\n@end\n\n\n@export ecgl.normal.fragment\n\n#define ROUGHNESS_CHANEL 0\n\nuniform bool useBumpMap;\nuniform bool useRoughnessMap;\nuniform bool doubleSide;\nuniform float roughness;\n\n@import ecgl.common.uv.fragmentHeader\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nuniform mat4 viewInverse : VIEWINVERSE;\n\n@import ecgl.common.normalMap.fragmentHeader\n@import ecgl.common.bumpMap.header\n\nuniform sampler2D roughnessMap;\n\nvoid main()\n{\n vec3 N = v_Normal;\n \n bool flipNormal = false;\n if (doubleSide) {\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(eyePos - v_WorldPosition);\n\n if (dot(N, V) < 0.0) {\n flipNormal = true;\n }\n }\n\n @import ecgl.common.normalMap.fragmentMain\n\n if (useBumpMap) {\n N = bumpNormal(v_WorldPosition, v_Normal, N);\n }\n\n float g = 1.0 - roughness;\n\n if (useRoughnessMap) {\n float g2 = 1.0 - texture2D(roughnessMap, v_DetailTexcoord)[ROUGHNESS_CHANEL];\n g = clamp(g2 + (g - 0.5) * 2.0, 0.0, 1.0);\n }\n\n if (flipNormal) {\n N = -N;\n }\n\n gl_FragColor.rgb = (N.xyz + 1.0) * 0.5;\n gl_FragColor.a = g;\n}\n@end";function S(e,t,n,i,r){var o=e.gl;t.setUniform(o,"1i",n,r),o.activeTexture(o.TEXTURE0+r),i.isRenderable()?i.bind(e):i.unbind(e)}function E(e,t,n,i,r){var o,a,s,l,c=e.gl;return function(r,u,h){if(!l||l.material!==r.material){var f=r.material,d=r.__program,m=f.get("roughness");null==m&&(m=1);var p=f.get("normalMap")||t,_=f.get("roughnessMap"),v=f.get("bumpMap"),g=f.get("uvRepeat"),x=f.get("uvOffset"),A=f.get("detailUvRepeat"),T=f.get("detailUvOffset"),y=!!v&&f.isTextureEnabled("bumpMap"),b=!!_&&f.isTextureEnabled("roughnessMap"),w=f.isDefined("fragment","DOUBLE_SIDED");v=v||n,_=_||i,h!==u?(u.set("normalMap",p),u.set("bumpMap",v),u.set("roughnessMap",_),u.set("useBumpMap",y),u.set("useRoughnessMap",b),u.set("doubleSide",w),null!=g&&u.set("uvRepeat",g),null!=x&&u.set("uvOffset",x),null!=A&&u.set("detailUvRepeat",A),null!=T&&u.set("detailUvOffset",T),u.set("roughness",m)):(d.setUniform(c,"1f","roughness",m),o!==p&&S(e,d,"normalMap",p,0),a!==v&&v&&S(e,d,"bumpMap",v,1),s!==_&&_&&S(e,d,"roughnessMap",_,2),null!=g&&d.setUniform(c,"2f","uvRepeat",g),null!=x&&d.setUniform(c,"2f","uvOffset",x),null!=A&&d.setUniform(c,"2f","detailUvRepeat",A),null!=T&&d.setUniform(c,"2f","detailUvOffset",T),d.setUniform(c,"1i","useBumpMap",+y),d.setUniform(c,"1i","useRoughnessMap",+b),d.setUniform(c,"1i","doubleSide",+w)),o=p,a=v,s=_,l=r}}}function O(e){e=e||{},this._depthTex=new r.A({format:o.A.DEPTH_COMPONENT,type:o.A.UNSIGNED_INT}),this._normalTex=new r.A({type:o.A.HALF_FLOAT}),this._framebuffer=new a.A,this._framebuffer.attach(this._normalTex),this._framebuffer.attach(this._depthTex,a.A.DEPTH_ATTACHMENT),this._normalMaterial=new w.A({shader:new i.A(i.A.source("ecgl.normal.vertex"),i.A.source("ecgl.normal.fragment"))}),this._normalMaterial.enableTexture(["normalMap","bumpMap","roughnessMap"]),this._defaultNormalMap=N.A.createBlank("#000"),this._defaultBumpMap=N.A.createBlank("#000"),this._defaultRoughessMap=N.A.createBlank("#000"),this._debugPass=new u.A({fragment:i.A.source("clay.compositor.output")}),this._debugPass.setUniform("texture",this._normalTex),this._debugPass.material.undefine("fragment","OUTPUT_ALPHA")}i.A.import(C),O.prototype.getDepthTexture=function(){return this._depthTex},O.prototype.getNormalTexture=function(){return this._normalTex},O.prototype.update=function(e,t,n){var i=e.getWidth(),r=e.getHeight(),o=this._depthTex,a=this._normalTex,s=this._normalMaterial;o.width=i,o.height=r,a.width=i,a.height=r;var l=t.getRenderList(n).opaque;this._framebuffer.bind(e),e.gl.clearColor(0,0,0,0),e.gl.clear(e.gl.COLOR_BUFFER_BIT|e.gl.DEPTH_BUFFER_BIT),e.gl.disable(e.gl.BLEND),e.renderPass(l,n,{getMaterial:function(){return s},ifRender:function(e){return e.renderNormal},beforeRender:E(e,this._defaultNormalMap,this._defaultBumpMap,this._defaultRoughessMap,this._normalMaterial),sort:e.opaqueSortCompare}),this._framebuffer.unbind(e)},O.prototype.renderDebug=function(e){this._debugPass.render(e)},O.prototype.dispose=function(e){this._depthTex.dispose(e),this._normalTex.dispose(e)};var P=O;function L(e){e=e||{},this._edgePass=new u.A({fragment:i.A.source("ecgl.edge")}),this._edgePass.setUniform("normalTexture",e.normalTexture),this._edgePass.setUniform("depthTexture",e.depthTexture),this._targetTexture=new r.A({type:o.A.HALF_FLOAT}),this._frameBuffer=new a.A,this._frameBuffer.attach(this._targetTexture)}L.prototype.update=function(e,t,n,i){var r=e.getWidth(),o=e.getHeight(),a=this._targetTexture;a.width=r,a.height=o;var s=this._frameBuffer;s.bind(e),this._edgePass.setUniform("projectionInv",t.invProjectionMatrix.array),this._edgePass.setUniform("textureSize",[r,o]),this._edgePass.setUniform("texture",n),this._edgePass.render(e),s.unbind(e)},L.prototype.getTargetTexture=function(){return this._targetTexture},L.prototype.setParameter=function(e,t){this._edgePass.setUniform(e,t)},L.prototype.dispose=function(e){this._targetTexture.dispose(e),this._frameBuffer.dispose(e)};var D=L,M={type:"compositor",nodes:[{name:"source",type:"texture",outputs:{color:{}}},{name:"source_half",shader:"#source(clay.compositor.downsample)",inputs:{texture:"source"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 2)",height:"expr(height * 1.0 / 2)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0, height * 1.0] )"}},{name:"bright",shader:"#source(clay.compositor.bright)",inputs:{texture:"source_half"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 2)",height:"expr(height * 1.0 / 2)",type:"HALF_FLOAT"}}},parameters:{threshold:2,scale:4,textureSize:"expr([width * 1.0 / 2, height / 2])"}},{name:"bright_downsample_4",shader:"#source(clay.compositor.downsample)",inputs:{texture:"bright"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 4)",height:"expr(height * 1.0 / 4)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0 / 2, height / 2] )"}},{name:"bright_downsample_8",shader:"#source(clay.compositor.downsample)",inputs:{texture:"bright_downsample_4"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 8)",height:"expr(height * 1.0 / 8)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0 / 4, height / 4] )"}},{name:"bright_downsample_16",shader:"#source(clay.compositor.downsample)",inputs:{texture:"bright_downsample_8"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 16)",height:"expr(height * 1.0 / 16)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0 / 8, height / 8] )"}},{name:"bright_downsample_32",shader:"#source(clay.compositor.downsample)",inputs:{texture:"bright_downsample_16"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 32)",height:"expr(height * 1.0 / 32)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0 / 16, height / 16] )"}},{name:"bright_upsample_16_blur_h",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_downsample_32"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 16)",height:"expr(height * 1.0 / 16)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:0,textureSize:"expr( [width * 1.0 / 32, height / 32] )"}},{name:"bright_upsample_16_blur_v",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_upsample_16_blur_h"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 16)",height:"expr(height * 1.0 / 16)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:1,textureSize:"expr( [width * 1.0 / 16, height * 1.0 / 16] )"}},{name:"bright_upsample_8_blur_h",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_downsample_16"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 8)",height:"expr(height * 1.0 / 8)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:0,textureSize:"expr( [width * 1.0 / 16, height * 1.0 / 16] )"}},{name:"bright_upsample_8_blur_v",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_upsample_8_blur_h"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 8)",height:"expr(height * 1.0 / 8)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:1,textureSize:"expr( [width * 1.0 / 8, height * 1.0 / 8] )"}},{name:"bright_upsample_8_blend",shader:"#source(clay.compositor.blend)",inputs:{texture1:"bright_upsample_8_blur_v",texture2:"bright_upsample_16_blur_v"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 8)",height:"expr(height * 1.0 / 8)",type:"HALF_FLOAT"}}},parameters:{weight1:.3,weight2:.7}},{name:"bright_upsample_4_blur_h",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_downsample_8"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 4)",height:"expr(height * 1.0 / 4)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:0,textureSize:"expr( [width * 1.0 / 8, height * 1.0 / 8] )"}},{name:"bright_upsample_4_blur_v",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_upsample_4_blur_h"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 4)",height:"expr(height * 1.0 / 4)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:1,textureSize:"expr( [width * 1.0 / 4, height * 1.0 / 4] )"}},{name:"bright_upsample_4_blend",shader:"#source(clay.compositor.blend)",inputs:{texture1:"bright_upsample_4_blur_v",texture2:"bright_upsample_8_blend"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 4)",height:"expr(height * 1.0 / 4)",type:"HALF_FLOAT"}}},parameters:{weight1:.3,weight2:.7}},{name:"bright_upsample_2_blur_h",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_downsample_4"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 2)",height:"expr(height * 1.0 / 2)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:0,textureSize:"expr( [width * 1.0 / 4, height * 1.0 / 4] )"}},{name:"bright_upsample_2_blur_v",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_upsample_2_blur_h"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 2)",height:"expr(height * 1.0 / 2)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:1,textureSize:"expr( [width * 1.0 / 2, height * 1.0 / 2] )"}},{name:"bright_upsample_2_blend",shader:"#source(clay.compositor.blend)",inputs:{texture1:"bright_upsample_2_blur_v",texture2:"bright_upsample_4_blend"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 2)",height:"expr(height * 1.0 / 2)",type:"HALF_FLOAT"}}},parameters:{weight1:.3,weight2:.7}},{name:"bright_upsample_full_blur_h",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:0,textureSize:"expr( [width * 1.0 / 2, height * 1.0 / 2] )"}},{name:"bright_upsample_full_blur_v",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_upsample_full_blur_h"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:1,textureSize:"expr( [width * 1.0, height * 1.0] )"}},{name:"bloom_composite",shader:"#source(clay.compositor.blend)",inputs:{texture1:"bright_upsample_full_blur_v",texture2:"bright_upsample_2_blend"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},parameters:{weight1:.3,weight2:.7}},{name:"coc",shader:"#source(ecgl.dof.coc)",outputs:{color:{parameters:{minFilter:"NEAREST",magFilter:"NEAREST",width:"expr(width * 1.0)",height:"expr(height * 1.0)"}}},parameters:{focalDist:50,focalRange:30}},{name:"dof_far_blur",shader:"#source(ecgl.dof.diskBlur)",inputs:{texture:"source",coc:"coc"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0, height * 1.0] )"}},{name:"dof_near_blur",shader:"#source(ecgl.dof.diskBlur)",inputs:{texture:"source",coc:"coc"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0, height * 1.0] )"},defines:{BLUR_NEARFIELD:null}},{name:"dof_coc_blur",shader:"#source(ecgl.dof.diskBlur)",inputs:{texture:"coc"},outputs:{color:{parameters:{minFilter:"NEAREST",magFilter:"NEAREST",width:"expr(width * 1.0)",height:"expr(height * 1.0)"}}},parameters:{textureSize:"expr( [width * 1.0, height * 1.0] )"},defines:{BLUR_COC:null}},{name:"dof_composite",shader:"#source(ecgl.dof.composite)",inputs:{original:"source",blurred:"dof_far_blur",nearfield:"dof_near_blur",coc:"coc",nearcoc:"dof_coc_blur"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}}},{name:"composite",shader:"#source(clay.compositor.hdr.composite)",inputs:{texture:"source",bloom:"bloom_composite"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)"}}},defines:{}},{name:"FXAA",shader:"#source(clay.compositor.fxaa)",inputs:{texture:"composite"}}]},R=n(8182),I=n(17970),z=n(42378),F=n(9617),U=n(82855),B=n(87448),H=n(20851),V=n(31972),G=n(71113),k="@export ecgl.dof.coc\n\nuniform sampler2D depth;\n\nuniform float zNear: 0.1;\nuniform float zFar: 2000;\n\nuniform float focalDistance: 3;\nuniform float focalRange: 1;\nuniform float focalLength: 30;\nuniform float fstop: 2.8;\n\nvarying vec2 v_Texcoord;\n\n@import clay.util.encode_float\n\nvoid main()\n{\n float z = texture2D(depth, v_Texcoord).r * 2.0 - 1.0;\n\n float dist = 2.0 * zNear * zFar / (zFar + zNear - z * (zFar - zNear));\n\n float aperture = focalLength / fstop;\n\n float coc;\n\n float uppper = focalDistance + focalRange;\n float lower = focalDistance - focalRange;\n if (dist <= uppper && dist >= lower) {\n coc = 0.5;\n }\n else {\n float focalAdjusted = dist > uppper ? uppper : lower;\n\n coc = abs(aperture * (focalLength * (dist - focalAdjusted)) / (dist * (focalAdjusted - focalLength)));\n coc = clamp(coc, 0.0, 2.0) / 2.00001;\n\n if (dist < lower) {\n coc = -coc;\n }\n coc = coc * 0.5 + 0.5;\n }\n\n gl_FragColor = encodeFloat(coc);\n}\n@end\n\n\n@export ecgl.dof.composite\n\n#define DEBUG 0\n\nuniform sampler2D original;\nuniform sampler2D blurred;\nuniform sampler2D nearfield;\nuniform sampler2D coc;\nuniform sampler2D nearcoc;\nvarying vec2 v_Texcoord;\n\n@import clay.util.rgbm\n@import clay.util.float\n\nvoid main()\n{\n vec4 blurredColor = texture2D(blurred, v_Texcoord);\n vec4 originalColor = texture2D(original, v_Texcoord);\n\n float fCoc = decodeFloat(texture2D(coc, v_Texcoord));\n\n fCoc = abs(fCoc * 2.0 - 1.0);\n\n float weight = smoothstep(0.0, 1.0, fCoc);\n \n#ifdef NEARFIELD_ENABLED\n vec4 nearfieldColor = texture2D(nearfield, v_Texcoord);\n float fNearCoc = decodeFloat(texture2D(nearcoc, v_Texcoord));\n fNearCoc = abs(fNearCoc * 2.0 - 1.0);\n\n gl_FragColor = encodeHDR(\n mix(\n nearfieldColor, mix(originalColor, blurredColor, weight),\n pow(1.0 - fNearCoc, 4.0)\n )\n );\n#else\n gl_FragColor = encodeHDR(mix(originalColor, blurredColor, weight));\n#endif\n\n}\n\n@end\n\n\n\n@export ecgl.dof.diskBlur\n\n#define POISSON_KERNEL_SIZE 16;\n\nuniform sampler2D texture;\nuniform sampler2D coc;\nvarying vec2 v_Texcoord;\n\nuniform float blurRadius : 10.0;\nuniform vec2 textureSize : [512.0, 512.0];\n\nuniform vec2 poissonKernel[POISSON_KERNEL_SIZE];\n\nuniform float percent;\n\nfloat nrand(const in vec2 n) {\n return fract(sin(dot(n.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n@import clay.util.rgbm\n@import clay.util.float\n\n\nvoid main()\n{\n vec2 offset = blurRadius / textureSize;\n\n float rnd = 6.28318 * nrand(v_Texcoord + 0.07 * percent );\n float cosa = cos(rnd);\n float sina = sin(rnd);\n vec4 basis = vec4(cosa, -sina, sina, cosa);\n\n#if !defined(BLUR_NEARFIELD) && !defined(BLUR_COC)\n offset *= abs(decodeFloat(texture2D(coc, v_Texcoord)) * 2.0 - 1.0);\n#endif\n\n#ifdef BLUR_COC\n float cocSum = 0.0;\n#else\n vec4 color = vec4(0.0);\n#endif\n\n\n float weightSum = 0.0;\n\n for (int i = 0; i < POISSON_KERNEL_SIZE; i++) {\n vec2 ofs = poissonKernel[i];\n\n ofs = vec2(dot(ofs, basis.xy), dot(ofs, basis.zw));\n\n vec2 uv = v_Texcoord + ofs * offset;\n vec4 texel = texture2D(texture, uv);\n\n float w = 1.0;\n#ifdef BLUR_COC\n float fCoc = decodeFloat(texel) * 2.0 - 1.0;\n cocSum += clamp(fCoc, -1.0, 0.0) * w;\n#else\n texel = texel;\n #if !defined(BLUR_NEARFIELD)\n float fCoc = decodeFloat(texture2D(coc, uv)) * 2.0 - 1.0;\n w *= abs(fCoc);\n #endif\n texel.rgb *= texel.a;\n color += texel * w;\n#endif\n\n weightSum += w;\n }\n\n#ifdef BLUR_COC\n gl_FragColor = encodeFloat(clamp(cocSum / weightSum, -1.0, 0.0) * 0.5 + 0.5);\n#else\n color /= weightSum;\n color.rgb /= (color.a + 0.0001);\n gl_FragColor = color;\n#endif\n}\n\n@end",j="@export ecgl.edge\n\nuniform sampler2D texture;\n\nuniform sampler2D normalTexture;\nuniform sampler2D depthTexture;\n\nuniform mat4 projectionInv;\n\nuniform vec2 textureSize;\n\nuniform vec4 edgeColor: [0,0,0,0.8];\n\nvarying vec2 v_Texcoord;\n\nvec3 packColor(vec2 coord) {\n float z = texture2D(depthTexture, coord).r * 2.0 - 1.0;\n vec4 p = vec4(v_Texcoord * 2.0 - 1.0, z, 1.0);\n vec4 p4 = projectionInv * p;\n\n return vec3(\n texture2D(normalTexture, coord).rg,\n -p4.z / p4.w / 5.0\n );\n}\n\nvoid main() {\n vec2 cc = v_Texcoord;\n vec3 center = packColor(cc);\n\n float size = clamp(1.0 - (center.z - 10.0) / 100.0, 0.0, 1.0) * 0.5;\n float dx = size / textureSize.x;\n float dy = size / textureSize.y;\n\n vec2 coord;\n vec3 topLeft = packColor(cc+vec2(-dx, -dy));\n vec3 top = packColor(cc+vec2(0.0, -dy));\n vec3 topRight = packColor(cc+vec2(dx, -dy));\n vec3 left = packColor(cc+vec2(-dx, 0.0));\n vec3 right = packColor(cc+vec2(dx, 0.0));\n vec3 bottomLeft = packColor(cc+vec2(-dx, dy));\n vec3 bottom = packColor(cc+vec2(0.0, dy));\n vec3 bottomRight = packColor(cc+vec2(dx, dy));\n\n vec3 v = -topLeft-2.0*top-topRight+bottomLeft+2.0*bottom+bottomRight;\n vec3 h = -bottomLeft-2.0*left-topLeft+bottomRight+2.0*right+topRight;\n\n float edge = sqrt(dot(h, h) + dot(v, v));\n\n edge = smoothstep(0.8, 1.0, edge);\n\n gl_FragColor = mix(texture2D(texture, v_Texcoord), vec4(edgeColor.rgb, 1.0), edgeColor.a * edge);\n}\n@end";function W(e,t){return{color:{parameters:{width:e,height:t}}}}i.A["import"](R.A),i.A["import"](I.A),i.A["import"](z.A),i.A["import"](F.A),i.A["import"](U.A),i.A["import"](B.A),i.A["import"](H.A),i.A["import"](V.A),i.A["import"](G.A),i.A["import"](k),i.A["import"](j);var Z=["composite","FXAA"];function X(){this._width,this._height,this._dpr,this._sourceTexture=new r.A({type:o.A.HALF_FLOAT}),this._depthTexture=new r.A({format:o.A.DEPTH_COMPONENT,type:o.A.UNSIGNED_INT}),this._framebuffer=new a.A,this._framebuffer.attach(this._sourceTexture),this._framebuffer.attach(this._depthTexture,a.A.DEPTH_ATTACHMENT),this._normalPass=new P,this._compositor=(0,s.A)(M);var e=this._compositor.getNodeByName("source");e.texture=this._sourceTexture;var t=this._compositor.getNodeByName("coc");this._sourceNode=e,this._cocNode=t,this._compositeNode=this._compositor.getNodeByName("composite"),this._fxaaNode=this._compositor.getNodeByName("FXAA"),this._dofBlurNodes=["dof_far_blur","dof_near_blur","dof_coc_blur"].map((function(e){return this._compositor.getNodeByName(e)}),this),this._dofBlurKernel=0,this._dofBlurKernelSize=new Float32Array(0),this._finalNodesChain=Z.map((function(e){return this._compositor.getNodeByName(e)}),this);var n={normalTexture:this._normalPass.getNormalTexture(),depthTexture:this._normalPass.getDepthTexture()};this._ssaoPass=new v(n),this._ssrPass=new T(n),this._edgePass=new D(n)}X.prototype.resize=function(e,t,n){n=n||1;e*=n,t*=n;var i=this._sourceTexture,r=this._depthTexture;i.width=e,i.height=t,r.width=e,r.height=t;var o={getWidth:function(){return e},getHeight:function(){return t},getDevicePixelRatio:function(){return n}};function a(e,t){if("function"===typeof e[t]){var n=e[t].__original||e[t];e[t]=function(e){return n.call(this,o)},e[t].__original=n}}this._compositor.nodes.forEach((function(e){for(var t in e.outputs){var n=e.outputs[t].parameters;n&&(a(n,"width"),a(n,"height"))}for(var i in e.parameters)a(e.parameters,i)})),this._width=e,this._height=t,this._dpr=n},X.prototype.getWidth=function(){return this._width},X.prototype.getHeight=function(){return this._height},X.prototype._ifRenderNormalPass=function(){return this._enableSSAO||this._enableEdge||this._enableSSR},X.prototype._getPrevNode=function(e){var t=Z.indexOf(e.name)-1,n=this._finalNodesChain[t];while(n&&!this._compositor.getNodeByName(n.name))t-=1,n=this._finalNodesChain[t];return n},X.prototype._getNextNode=function(e){var t=Z.indexOf(e.name)+1,n=this._finalNodesChain[t];while(n&&!this._compositor.getNodeByName(n.name))t+=1,n=this._finalNodesChain[t];return n},X.prototype._addChainNode=function(e){var t=this._getPrevNode(e),n=this._getNextNode(e);t&&(e.inputs.texture=t.name,n?(e.outputs=W(this.getWidth.bind(this),this.getHeight.bind(this)),n.inputs.texture=e.name):e.outputs=null,this._compositor.addNode(e))},X.prototype._removeChainNode=function(e){var t=this._getPrevNode(e),n=this._getNextNode(e);t&&(n?(t.outputs=W(this.getWidth.bind(this),this.getHeight.bind(this)),n.inputs.texture=t.name):t.outputs=null,this._compositor.removeNode(e))},X.prototype.updateNormal=function(e,t,n,i){this._ifRenderNormalPass()&&this._normalPass.update(e,t,n)},X.prototype.updateSSAO=function(e,t,n,i){this._ssaoPass.update(e,n,i)},X.prototype.enableSSAO=function(){this._enableSSAO=!0},X.prototype.disableSSAO=function(){this._enableSSAO=!1},X.prototype.enableSSR=function(){this._enableSSR=!0},X.prototype.disableSSR=function(){this._enableSSR=!1},X.prototype.getSSAOTexture=function(){return this._ssaoPass.getTargetTexture()},X.prototype.getSourceFrameBuffer=function(){return this._framebuffer},X.prototype.getSourceTexture=function(){return this._sourceTexture},X.prototype.disableFXAA=function(){this._removeChainNode(this._fxaaNode)},X.prototype.enableFXAA=function(){this._addChainNode(this._fxaaNode)},X.prototype.enableBloom=function(){this._compositeNode.inputs.bloom="bloom_composite",this._compositor.dirty()},X.prototype.disableBloom=function(){this._compositeNode.inputs.bloom=null,this._compositor.dirty()},X.prototype.enableDOF=function(){this._compositeNode.inputs.texture="dof_composite",this._compositor.dirty()},X.prototype.disableDOF=function(){this._compositeNode.inputs.texture="source",this._compositor.dirty()},X.prototype.enableColorCorrection=function(){this._compositeNode.define("COLOR_CORRECTION"),this._enableColorCorrection=!0},X.prototype.disableColorCorrection=function(){this._compositeNode.undefine("COLOR_CORRECTION"),this._enableColorCorrection=!1},X.prototype.enableEdge=function(){this._enableEdge=!0},X.prototype.disableEdge=function(){this._enableEdge=!1},X.prototype.setBloomIntensity=function(e){this._compositeNode.setParameter("bloomIntensity",e)},X.prototype.setSSAOParameter=function(e,t){switch(e){case"quality":var n={low:6,medium:12,high:32,ultra:62}[t]||12;this._ssaoPass.setParameter("kernelSize",n);break;case"radius":this._ssaoPass.setParameter(e,t),this._ssaoPass.setParameter("bias",t/200);break;case"intensity":this._ssaoPass.setParameter(e,t);break;default:0}},X.prototype.setDOFParameter=function(e,t){switch(e){case"focalDistance":case"focalRange":case"fstop":this._cocNode.setParameter(e,t);break;case"blurRadius":for(var n=0;n<this._dofBlurNodes.length;n++)this._dofBlurNodes[n].setParameter("blurRadius",t);break;case"quality":var i={low:4,medium:8,high:16,ultra:32}[t]||8;this._dofBlurKernelSize=i;for(n=0;n<this._dofBlurNodes.length;n++)this._dofBlurNodes[n].pass.material.define("POISSON_KERNEL_SIZE",i);this._dofBlurKernel=new Float32Array(2*i);break;default:0}},X.prototype.setSSRParameter=function(e,t){if(null!=t)switch(e){case"quality":var n={low:10,medium:15,high:30,ultra:80}[t]||20,i={low:32,medium:16,high:8,ultra:4}[t]||16;this._ssrPass.setParameter("maxIteration",n),this._ssrPass.setParameter("pixelStride",i);break;case"maxRoughness":this._ssrPass.setParameter("minGlossiness",Math.max(Math.min(1-t,1),0));break;case"physical":this.setPhysicallyCorrectSSR(t);break;default:console.warn("Unkown SSR parameter "+e)}},X.prototype.setPhysicallyCorrectSSR=function(e){this._ssrPass.setPhysicallyCorrect(e)},X.prototype.setEdgeColor=function(e){var t=b.A.parseColor(e);this._edgePass.setParameter("edgeColor",t)},X.prototype.setExposure=function(e){this._compositeNode.setParameter("exposure",Math.pow(2,e))},X.prototype.setColorLookupTexture=function(e,t){this._compositeNode.pass.material.setTextureImage("lut",this._enableColorCorrection?e:"none",t,{minFilter:b.A.Texture.NEAREST,magFilter:b.A.Texture.NEAREST,flipY:!1})},X.prototype.setColorCorrection=function(e,t){this._compositeNode.setParameter(e,t)},X.prototype.isSSREnabled=function(){return this._enableSSR},X.prototype.composite=function(e,t,n,i,r){var o=this._sourceTexture,a=o;this._enableEdge&&(this._edgePass.update(e,n,o,r),o=a=this._edgePass.getTargetTexture()),this._enableSSR&&(this._ssrPass.update(e,n,o,r),a=this._ssrPass.getTargetTexture(),this._ssrPass.setSSAOTexture(this._enableSSAO?this._ssaoPass.getTargetTexture():null)),this._sourceNode.texture=a,this._cocNode.setParameter("depth",this._depthTexture);for(var s=this._dofBlurKernel,l=this._dofBlurKernelSize,c=Math.floor(y.length/2/l),u=r%c,h=0;h<2*l;h++)s[h]=y[h+u*l*2];for(h=0;h<this._dofBlurNodes.length;h++)this._dofBlurNodes[h].setParameter("percent",r/30),this._dofBlurNodes[h].setParameter("poissonKernel",s);this._cocNode.setParameter("zNear",n.near),this._cocNode.setParameter("zFar",n.far),this._compositor.render(e,i)},X.prototype.dispose=function(e){this._sourceTexture.dispose(e),this._depthTexture.dispose(e),this._framebuffer.dispose(e),this._compositor.dispose(e),this._normalPass.dispose(e),this._ssaoPass.dispose(e)};var Y=X},58100:function(e,t,n){n(44114);var i=n(40144),r=n(74998),o=n(87322),a=n(33672),s=n(50296),l=n(21647);function c(e){for(var t=[],n=0;n<30;n++)t.push([(0,i.A)(n,2),(0,i.A)(n,3)]);this._haltonSequence=t,this._frame=0,this._sourceTex=new a.A,this._sourceFb=new o.A,this._sourceFb.attach(this._sourceTex),this._prevFrameTex=new a.A,this._outputTex=new a.A;var l=this._blendPass=new r.A({fragment:s.A.source("clay.compositor.blend")});l.material.disableTexturesAll(),l.material.enableTexture(["texture1","texture2"]),this._blendFb=new o.A({depthBuffer:!1}),this._outputPass=new r.A({fragment:s.A.source("clay.compositor.output"),blendWithPrevious:!0}),this._outputPass.material.define("fragment","OUTPUT_ALPHA"),this._outputPass.material.blend=function(e){e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA)}}c.prototype={constructor:c,jitterProjection:function(e,t){var n=e.viewport,i=n.devicePixelRatio||e.getDevicePixelRatio(),r=n.width*i,o=n.height*i,a=this._haltonSequence[this._frame%this._haltonSequence.length],s=new l.A;s.array[12]=(2*a[0]-1)/r,s.array[13]=(2*a[1]-1)/o,l.A.mul(t.projectionMatrix,s,t.projectionMatrix),l.A.invert(t.invProjectionMatrix,t.projectionMatrix)},resetFrame:function(){this._frame=0},getFrame:function(){return this._frame},getSourceFrameBuffer:function(){return this._sourceFb},getOutputTexture:function(){return this._outputTex},resize:function(e,t){this._prevFrameTex.width=e,this._prevFrameTex.height=t,this._outputTex.width=e,this._outputTex.height=t,this._sourceTex.width=e,this._sourceTex.height=t,this._prevFrameTex.dirty(),this._outputTex.dirty(),this._sourceTex.dirty()},isFinished:function(){return this._frame>=this._haltonSequence.length},render:function(e,t,n){var i=this._blendPass;0===this._frame?(i.setUniform("weight1",0),i.setUniform("weight2",1)):(i.setUniform("weight1",.9),i.setUniform("weight2",.1)),i.setUniform("texture1",this._prevFrameTex),i.setUniform("texture2",t||this._sourceTex),this._blendFb.attach(this._outputTex),this._blendFb.bind(e),i.render(e),this._blendFb.unbind(e),n||(this._outputPass.setUniform("texture",this._outputTex),this._outputPass.render(e));var r=this._prevFrameTex;this._prevFrameTex=this._outputTex,this._outputTex=r,this._frame++},dispose:function(e){this._sourceFb.dispose(e),this._blendFb.dispose(e),this._prevFrameTex.dispose(e),this._outputTex.dispose(e),this._sourceTex.dispose(e),this._outputPass.dispose(e),this._blendPass.dispose(e)}},t.A=c},40144:function(e,t){function n(e,t){var n=0,i=1/t,r=e;while(r>0)n+=i*(r%t),r=Math.floor(r/t),i/=t;return n}t.A=n},96176:function(e,t,n){n(48622),n(64837),n(16882),n(55720),n(91696),n(29108),n(83e3),n(2717),n(83398),n(4991),n(46957),n(75386),n(18569),n(21518),n(70580),n(24727),n(14659)},76800:function(e,t,n){n(44114);var i=n(49350),r=n(34863),o=n(504),a=n(69665),s=a.A.firstNotNull,l={left:0,middle:1,right:2};function c(e){return e instanceof Array||(e=[e,e]),e}var u=i.A.extend((function(){return{zr:null,viewGL:null,_center:new o.A,minDistance:.5,maxDistance:1.5,maxOrthographicSize:300,minOrthographicSize:30,minAlpha:-90,maxAlpha:90,minBeta:-1/0,maxBeta:1/0,autoRotateAfterStill:0,autoRotateDirection:"cw",autoRotateSpeed:60,damping:.8,rotateSensitivity:1,zoomSensitivity:1,panSensitivity:1,panMouseButton:"middle",rotateMouseButton:"left",_mode:"rotate",_camera:null,_needsUpdate:!1,_rotating:!1,_phi:0,_theta:0,_mouseX:0,_mouseY:0,_rotateVelocity:new r.A,_panVelocity:new r.A,_distance:500,_zoomSpeed:0,_stillTimeout:0,_animators:[]}}),(function(){["_mouseDownHandler","_mouseWheelHandler","_mouseMoveHandler","_mouseUpHandler","_pinchHandler","_contextMenuHandler","_update"].forEach((function(e){this[e]=this[e].bind(this)}),this)}),{init:function(){var e=this.zr;e&&(e.on("mousedown",this._mouseDownHandler),e.on("globalout",this._mouseUpHandler),e.on("mousewheel",this._mouseWheelHandler),e.on("pinch",this._pinchHandler),e.animation.on("frame",this._update),e.dom.addEventListener("contextmenu",this._contextMenuHandler))},dispose:function(){var e=this.zr;e&&(e.off("mousedown",this._mouseDownHandler),e.off("mousemove",this._mouseMoveHandler),e.off("mouseup",this._mouseUpHandler),e.off("mousewheel",this._mouseWheelHandler),e.off("pinch",this._pinchHandler),e.off("globalout",this._mouseUpHandler),e.dom.removeEventListener("contextmenu",this._contextMenuHandler),e.animation.off("frame",this._update)),this.stopAllAnimation()},getDistance:function(){return this._distance},setDistance:function(e){this._distance=e,this._needsUpdate=!0},getOrthographicSize:function(){return this._orthoSize},setOrthographicSize:function(e){this._orthoSize=e,this._needsUpdate=!0},getAlpha:function(){return this._theta/Math.PI*180},getBeta:function(){return-this._phi/Math.PI*180},getCenter:function(){return this._center.toArray()},setAlpha:function(e){e=Math.max(Math.min(this.maxAlpha,e),this.minAlpha),this._theta=e/180*Math.PI,this._needsUpdate=!0},setBeta:function(e){e=Math.max(Math.min(this.maxBeta,e),this.minBeta),this._phi=-e/180*Math.PI,this._needsUpdate=!0},setCenter:function(e){this._center.setArray(e)},setViewGL:function(e){this.viewGL=e},getCamera:function(){return this.viewGL.camera},setFromViewControlModel:function(e,t){t=t||{};var n=t.baseDistance||0,i=t.baseOrthoSize||1,r=e.get("projection");"perspective"!==r&&"orthographic"!==r&&"isometric"!==r&&(r="perspective"),this._projection=r,this.viewGL.setProjection(r);var o=e.get("distance")+n,a=e.get("orthographicSize")+i;[["damping",.8],["autoRotate",!1],["autoRotateAfterStill",3],["autoRotateDirection","cw"],["autoRotateSpeed",10],["minDistance",30],["maxDistance",400],["minOrthographicSize",30],["maxOrthographicSize",300],["minAlpha",-90],["maxAlpha",90],["minBeta",-1/0],["maxBeta",1/0],["rotateSensitivity",1],["zoomSensitivity",1],["panSensitivity",1],["panMouseButton","left"],["rotateMouseButton","middle"]].forEach((function(t){this[t[0]]=s(e.get(t[0]),t[1])}),this),this.minDistance+=n,this.maxDistance+=n,this.minOrthographicSize+=i,this.maxOrthographicSize+=i;var l=e.ecModel,c={};["animation","animationDurationUpdate","animationEasingUpdate"].forEach((function(t){c[t]=s(e.get(t),l&&l.get(t))}));var u=s(t.alpha,e.get("alpha"))||0,h=s(t.beta,e.get("beta"))||0,f=s(t.center,e.get("center"))||[0,0,0];c.animation&&c.animationDurationUpdate>0&&this._notFirst?this.animateTo({alpha:u,beta:h,center:f,distance:o,orthographicSize:a,easing:c.animationEasingUpdate,duration:c.animationDurationUpdate}):(this.setDistance(o),this.setAlpha(u),this.setBeta(h),this.setCenter(f),this.setOrthographicSize(a)),this._notFirst=!0,this._validateProperties()},_validateProperties:function(){0},animateTo:function(e){var t=this.zr,n=this,i={},r={};return null!=e.distance&&(i.distance=this.getDistance(),r.distance=e.distance),null!=e.orthographicSize&&(i.orthographicSize=this.getOrthographicSize(),r.orthographicSize=e.orthographicSize),null!=e.alpha&&(i.alpha=this.getAlpha(),r.alpha=e.alpha),null!=e.beta&&(i.beta=this.getBeta(),r.beta=e.beta),null!=e.center&&(i.center=this.getCenter(),r.center=e.center),this._addAnimator(t.animation.animate(i).when(e.duration||1e3,r).during((function(){null!=i.alpha&&n.setAlpha(i.alpha),null!=i.beta&&n.setBeta(i.beta),null!=i.distance&&n.setDistance(i.distance),null!=i.center&&n.setCenter(i.center),null!=i.orthographicSize&&n.setOrthographicSize(i.orthographicSize),n._needsUpdate=!0}))).start(e.easing||"linear")},stopAllAnimation:function(){for(var e=0;e<this._animators.length;e++)this._animators[e].stop();this._animators.length=0},update:function(){this._needsUpdate=!0,this._update(20)},_isAnimating:function(){return this._animators.length>0},_update:function(e){if(this._rotating){var t=("cw"===this.autoRotateDirection?1:-1)*this.autoRotateSpeed/180*Math.PI;this._phi-=t*e/1e3,this._needsUpdate=!0}else this._rotateVelocity.len()>0&&(this._needsUpdate=!0);(Math.abs(this._zoomSpeed)>.1||this._panVelocity.len()>0)&&(this._needsUpdate=!0),this._needsUpdate&&(e=Math.min(e,50),this._updateDistanceOrSize(e),this._updatePan(e),this._updateRotate(e),this._updateTransform(),this.getCamera().update(),this.zr&&this.zr.refresh(),this.trigger("update"),this._needsUpdate=!1)},_updateRotate:function(e){var t=this._rotateVelocity;this._phi=t.y*e/20+this._phi,this._theta=t.x*e/20+this._theta,this.setAlpha(this.getAlpha()),this.setBeta(this.getBeta()),this._vectorDamping(t,Math.pow(this.damping,e/16))},_updateDistanceOrSize:function(e){"perspective"===this._projection?this._setDistance(this._distance+this._zoomSpeed*e/20):this._setOrthoSize(this._orthoSize+this._zoomSpeed*e/20),this._zoomSpeed*=Math.pow(this.damping,e/16)},_setDistance:function(e){this._distance=Math.max(Math.min(e,this.maxDistance),this.minDistance)},_setOrthoSize:function(e){this._orthoSize=Math.max(Math.min(e,this.maxOrthographicSize),this.minOrthographicSize);var t=this.getCamera(),n=this._orthoSize,i=n/this.viewGL.viewport.height*this.viewGL.viewport.width;t.left=-i/2,t.right=i/2,t.top=n/2,t.bottom=-n/2},_updatePan:function(e){var t=this._panVelocity,n=this._distance,i=this.getCamera(),r=i.worldTransform.y,o=i.worldTransform.x;this._center.scaleAndAdd(o,-t.x*n/200).scaleAndAdd(r,-t.y*n/200),this._vectorDamping(t,0)},_updateTransform:function(){var e=this.getCamera(),t=new o.A,n=this._theta+Math.PI/2,i=this._phi+Math.PI/2,r=Math.sin(n);t.x=r*Math.cos(i),t.y=-Math.cos(n),t.z=r*Math.sin(i),e.position.copy(this._center).scaleAndAdd(t,this._distance),e.rotation.identity().rotateY(-this._phi).rotateX(-this._theta)},_startCountingStill:function(){clearTimeout(this._stillTimeout);var e=this.autoRotateAfterStill,t=this;!isNaN(e)&&e>0&&(this._stillTimeout=setTimeout((function(){t._rotating=!0}),1e3*e))},_vectorDamping:function(e,t){var n=e.len();n*=t,n<1e-4&&(n=0),e.normalize().scale(n)},_decomposeTransform:function(){if(this.getCamera()){this.getCamera().updateWorldTransform();var e=this.getCamera().worldTransform.z,t=Math.asin(e.y),n=Math.atan2(e.x,e.z);this._theta=t,this._phi=-n,this.setBeta(this.getBeta()),this.setAlpha(this.getAlpha()),this.getCamera().aspect?this._setDistance(this.getCamera().position.dist(this._center)):this._setOrthoSize(this.getCamera().top-this.getCamera().bottom)}},_mouseDownHandler:function(e){if(!e.target&&!this._isAnimating()){var t=e.offsetX,n=e.offsetY;this.viewGL&&!this.viewGL.containPoint(t,n)||(this.zr.on("mousemove",this._mouseMoveHandler),this.zr.on("mouseup",this._mouseUpHandler),e.event.targetTouches?1===e.event.targetTouches.length&&(this._mode="rotate"):e.event.button===l[this.rotateMouseButton]?this._mode="rotate":e.event.button===l[this.panMouseButton]?this._mode="pan":this._mode="",this._rotateVelocity.set(0,0),this._rotating=!1,this.autoRotate&&this._startCountingStill(),this._mouseX=e.offsetX,this._mouseY=e.offsetY)}},_mouseMoveHandler:function(e){if((!e.target||!e.target.__isGLToZRProxy)&&!this._isAnimating()){var t=c(this.panSensitivity),n=c(this.rotateSensitivity);"rotate"===this._mode?(this._rotateVelocity.y=(e.offsetX-this._mouseX)/this.zr.getHeight()*2*n[0],this._rotateVelocity.x=(e.offsetY-this._mouseY)/this.zr.getWidth()*2*n[1]):"pan"===this._mode&&(this._panVelocity.x=(e.offsetX-this._mouseX)/this.zr.getWidth()*t[0]*400,this._panVelocity.y=(-e.offsetY+this._mouseY)/this.zr.getHeight()*t[1]*400),this._mouseX=e.offsetX,this._mouseY=e.offsetY,e.event.preventDefault()}},_mouseWheelHandler:function(e){if(!this._isAnimating()){var t=e.event.wheelDelta||-e.event.detail;this._zoomHandler(e,t)}},_pinchHandler:function(e){this._isAnimating()||(this._zoomHandler(e,e.pinchScale>1?1:-1),this._mode="")},_zoomHandler:function(e,t){if(0!==t){var n,i=e.offsetX,r=e.offsetY;if(!this.viewGL||this.viewGL.containPoint(i,r))n="perspective"===this._projection?Math.max(Math.max(Math.min(this._distance-this.minDistance,this.maxDistance-this._distance))/20,.5):Math.max(Math.max(Math.min(this._orthoSize-this.minOrthographicSize,this.maxOrthographicSize-this._orthoSize))/20,.5),this._zoomSpeed=(t>0?-1:1)*n*this.zoomSensitivity,this._rotating=!1,this.autoRotate&&"rotate"===this._mode&&this._startCountingStill(),e.event.preventDefault()}},_mouseUpHandler:function(){this.zr.off("mousemove",this._mouseMoveHandler),this.zr.off("mouseup",this._mouseUpHandler)},_isRightMouseButtonUsed:function(){return"right"===this.rotateMouseButton||"right"===this.panMouseButton},_contextMenuHandler:function(e){this._isRightMouseButtonUsed()&&e.preventDefault()},_addAnimator:function(e){var t=this._animators;return t.push(e),e.done((function(){var n=t.indexOf(e);n>=0&&t.splice(n,1)})),e}});Object.defineProperty(u.prototype,"autoRotate",{get:function(e){return this._autoRotate},set:function(e){this._autoRotate=e,this._rotating=e}}),t.A=u},35055:function(e,t,n){n(44114);function i(e,t,n){var i=e[t];e[t]=e[n],e[n]=i}function r(e,t,n,r,o){var a=n,s=e[t];i(e,t,r);for(var l=n;l<r;l++)o(e[l],s)<0&&(i(e,l,a),a++);return i(e,r,a),a}function o(e,t,n,i){if(n<i){var a=Math.floor((n+i)/2),s=r(e,a,n,i,t);o(e,t,n,s-1),o(e,t,s+1,i)}}function a(){this._parts=[]}a.prototype.step=function(e,t,n){var i=e.length;if(0===n){this._parts=[],this._sorted=!1;var a=Math.floor(i/2);this._parts.push({pivot:a,left:0,right:i-1}),this._currentSortPartIdx=0}if(!this._sorted){var s=this._parts;if(0===s.length)return this._sorted=!0,!0;if(s.length<512){for(var l=0;l<s.length;l++)s[l].pivot=r(e,s[l].pivot,s[l].left,s[l].right,t);var c=[];for(l=0;l<s.length;l++){var u=s[l].left,h=s[l].pivot-1;h>u&&c.push({pivot:Math.floor((h+u)/2),left:u,right:h});u=s[l].pivot+1,h=s[l].right;h>u&&c.push({pivot:Math.floor((h+u)/2),left:u,right:h})}s=this._parts=c}else for(l=0;l<Math.floor(s.length/10);l++){var f=s.length-1-this._currentSortPartIdx;if(o(e,t,s[f].left,s[f].right),this._currentSortPartIdx++,this._currentSortPartIdx===s.length)return this._sorted=!0,!0}return!1}},a.sort=o,t.A=a},79093:function(e,t,n){var i=n(49350),r=i.A.extend((function(){return{zr:null,viewGL:null,minZoom:.2,maxZoom:5,_needsUpdate:!1,_dx:0,_dy:0,_zoom:1}}),(function(){this._mouseDownHandler=this._mouseDownHandler.bind(this),this._mouseWheelHandler=this._mouseWheelHandler.bind(this),this._mouseMoveHandler=this._mouseMoveHandler.bind(this),this._mouseUpHandler=this._mouseUpHandler.bind(this),this._update=this._update.bind(this)}),{init:function(){var e=this.zr;e.on("mousedown",this._mouseDownHandler),e.on("mousewheel",this._mouseWheelHandler),e.on("globalout",this._mouseUpHandler),e.animation.on("frame",this._update)},setTarget:function(e){this._target=e},setZoom:function(e){this._zoom=Math.max(Math.min(e,this.maxZoom),this.minZoom),this._needsUpdate=!0},setOffset:function(e){this._dx=e[0],this._dy=e[1],this._needsUpdate=!0},getZoom:function(){return this._zoom},getOffset:function(){return[this._dx,this._dy]},_update:function(){if(this._target&&this._needsUpdate){var e=this._target,t=this._zoom;e.position.x=this._dx,e.position.y=this._dy,e.scale.set(t,t,t),this.zr.refresh(),this._needsUpdate=!1,this.trigger("update")}},_mouseDownHandler:function(e){if(!e.target){var t=e.offsetX,n=e.offsetY;if(!this.viewGL||this.viewGL.containPoint(t,n)){this.zr.on("mousemove",this._mouseMoveHandler),this.zr.on("mouseup",this._mouseUpHandler);var i=this._convertPos(t,n);this._x=i.x,this._y=i.y}}},_convertPos:function(e,t){var n=this.viewGL.camera,i=this.viewGL.viewport;return{x:(e-i.x)/i.width*(n.right-n.left)+n.left,y:(t-i.y)/i.height*(n.bottom-n.top)+n.top}},_mouseMoveHandler:function(e){var t=this._convertPos(e.offsetX,e.offsetY);this._dx+=t.x-this._x,this._dy+=t.y-this._y,this._x=t.x,this._y=t.y,this._needsUpdate=!0},_mouseUpHandler:function(e){this.zr.off("mousemove",this._mouseMoveHandler),this.zr.off("mouseup",this._mouseUpHandler)},_mouseWheelHandler:function(e){e=e.event;var t=e.wheelDelta||-e.detail;if(0!==t){var n=e.offsetX,i=e.offsetY;if(!this.viewGL||this.viewGL.containPoint(n,i)){var r=t>0?1.1:.9,o=Math.max(Math.min(this._zoom*r,this.maxZoom),this.minZoom);r=o/this._zoom;var a=this._convertPos(n,i),s=(a.x-this._dx)*(r-1),l=(a.y-this._dy)*(r-1);this._dx-=s,this._dy-=l,this._zoom=o,this._needsUpdate=!0}}},dispose:function(){var e=this.zr;e.off("mousedown",this._mouseDownHandler),e.off("mousemove",this._mouseMoveHandler),e.off("mouseup",this._mouseUpHandler),e.off("mousewheel",this._mouseWheelHandler),e.off("globalout",this._mouseUpHandler),e.animation.off("frame",this._update)}});t.A=r},70756:function(e,t,n){n(44114);var i=n(85811),r=n(33672);function o(e,t,n,i,r,o,a){this._zr=e,this._x=0,this._y=0,this._rowHeight=0,this.width=i,this.height=r,this.offsetX=t,this.offsetY=n,this.dpr=a,this.gap=o}function a(e){e=e||{},e.width=e.width||512,e.height=e.height||512,e.devicePixelRatio=e.devicePixelRatio||1,e.gap=null==e.gap?2:e.gap;var t=document.createElement("canvas");t.width=e.width*e.devicePixelRatio,t.height=e.height*e.devicePixelRatio,this._canvas=t,this._texture=new r.A({image:t,flipY:!1});var n=this;this._zr=i.nd.init(t);var a=this._zr.refreshImmediately;this._zr.refreshImmediately=function(){a.call(this),n._texture.dirty(),n.onupdate&&n.onupdate()},this._dpr=e.devicePixelRatio,this._coords={},this.onupdate=e.onupdate,this._gap=e.gap,this._textureAtlasNodes=[new o(this._zr,0,0,e.width,e.height,this._gap,this._dpr)],this._nodeWidth=e.width,this._nodeHeight=e.height,this._currentNodeIdx=0}o.prototype={constructor:o,clear:function(){this._x=0,this._y=0,this._rowHeight=0},add:function(e,t,n){var i=e.getBoundingRect();null==t&&(t=i.width),null==n&&(n=i.height),t*=this.dpr,n*=this.dpr,this._fitElement(e,t,n);var r=this._x,o=this._y,a=this.width*this.dpr,s=this.height*this.dpr,l=this.gap;if(r+t+l>a&&(r=this._x=0,o+=this._rowHeight+l,this._y=o,this._rowHeight=0),this._x+=t+l,this._rowHeight=Math.max(this._rowHeight,n),o+n+l>s)return null;e.x+=this.offsetX*this.dpr+r,e.y+=this.offsetY*this.dpr+o,this._zr.add(e);var c=[this.offsetX/this.width,this.offsetY/this.height],u=[[r/a+c[0],o/s+c[1]],[(r+t)/a+c[0],(o+n)/s+c[1]]];return u},_fitElement:function(e,t,n){var i=e.getBoundingRect(),r=t/i.width,o=n/i.height;e.x=-i.x*r,e.y=-i.y*o,e.scaleX=r,e.scaleY=o,e.update()}},a.prototype={clear:function(){for(var e=0;e<this._textureAtlasNodes.length;e++)this._textureAtlasNodes[e].clear();this._currentNodeIdx=0,this._zr.clear(),this._coords={}},getWidth:function(){return this._width},getHeight:function(){return this._height},getTexture:function(){return this._texture},getDevicePixelRatio:function(){return this._dpr},getZr:function(){return this._zr},_getCurrentNode:function(){return this._textureAtlasNodes[this._currentNodeIdx]},_expand:function(){if(this._currentNodeIdx++,this._textureAtlasNodes[this._currentNodeIdx])return this._textureAtlasNodes[this._currentNodeIdx];var e=4096/this._dpr,t=this._textureAtlasNodes,n=t.length,i=n*this._nodeWidth%e,r=Math.floor(n*this._nodeWidth/e)*this._nodeHeight;if(!(r>=e)){var a=(i+this._nodeWidth)*this._dpr,s=(r+this._nodeHeight)*this._dpr;try{this._zr.resize({width:a,height:s})}catch(c){this._canvas.width=a,this._canvas.height=s}var l=new o(this._zr,i,r,this._nodeWidth,this._nodeHeight,this._gap,this._dpr);return this._textureAtlasNodes.push(l),l}},add:function(e,t,n){if(this._coords[e.id])return this._coords[e.id];var i=this._getCurrentNode().add(e,t,n);if(!i){var r=this._expand();if(!r)return;i=r.add(e,t,n)}return this._coords[e.id]=i,i},getCoordsScale:function(){var e=this._dpr;return[this._nodeWidth/this._canvas.width*e,this._nodeHeight/this._canvas.height*e]},getCoords:function(e){return this._coords[e]},dispose:function(){this._zr.dispose()}},t.A=a},21761:function(e,t,n){n(44114);function i(e,t,n){n=n||2;var i,o,s,l,c,u,f,d=t&&t.length,m=d?t[0]*n:e.length,p=r(e,0,m,n,!0),_=[];if(!p)return _;if(d&&(p=h(e,t,p,n)),e.length>80*n){i=s=e[0],o=l=e[1];for(var v=n;v<m;v+=n)c=e[v],u=e[v+1],c<i&&(i=c),u<o&&(o=u),c>s&&(s=c),u>l&&(l=u);f=Math.max(s-i,l-o)}return a(p,_,n,i,o,f),_}function r(e,t,n,i,r){var o,a;if(r===L(e,t,n,i)>0)for(o=t;o<n;o+=i)a=E(o,e[o],e[o+1],a);else for(o=n-i;o>=t;o-=i)a=E(o,e[o],e[o+1],a);return a&&y(a,a.next)&&(O(a),a=a.next),a}function o(e,t){if(!e)return e;t||(t=e);var n,i=e;do{if(n=!1,i.steiner||!y(i,i.next)&&0!==T(i.prev,i,i.next))i=i.next;else{if(O(i),i=t=i.prev,i===i.next)return null;n=!0}}while(n||i!==t);return t}function a(e,t,n,i,r,h,f){if(e){!f&&h&&p(e,i,r,h);var d,m,_=e;while(e.prev!==e.next)if(d=e.prev,m=e.next,h?l(e,i,r,h):s(e))t.push(d.i/n),t.push(e.i/n),t.push(m.i/n),O(e),e=m.next,_=m.next;else if(e=m,e===_){f?1===f?(e=c(e,t,n),a(e,t,n,i,r,h,2)):2===f&&u(e,t,n,i,r,h):a(o(e),t,n,i,r,h,1);break}}}function s(e){var t=e.prev,n=e,i=e.next;if(T(t,n,i)>=0)return!1;var r=e.next.next;while(r!==e.prev){if(x(t.x,t.y,n.x,n.y,i.x,i.y,r.x,r.y)&&T(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function l(e,t,n,i){var r=e.prev,o=e,a=e.next;if(T(r,o,a)>=0)return!1;var s=r.x<o.x?r.x<a.x?r.x:a.x:o.x<a.x?o.x:a.x,l=r.y<o.y?r.y<a.y?r.y:a.y:o.y<a.y?o.y:a.y,c=r.x>o.x?r.x>a.x?r.x:a.x:o.x>a.x?o.x:a.x,u=r.y>o.y?r.y>a.y?r.y:a.y:o.y>a.y?o.y:a.y,h=v(s,l,t,n,i),f=v(c,u,t,n,i),d=e.nextZ;while(d&&d.z<=f){if(d!==e.prev&&d!==e.next&&x(r.x,r.y,o.x,o.y,a.x,a.y,d.x,d.y)&&T(d.prev,d,d.next)>=0)return!1;d=d.nextZ}d=e.prevZ;while(d&&d.z>=h){if(d!==e.prev&&d!==e.next&&x(r.x,r.y,o.x,o.y,a.x,a.y,d.x,d.y)&&T(d.prev,d,d.next)>=0)return!1;d=d.prevZ}return!0}function c(e,t,n){var i=e;do{var r=i.prev,o=i.next.next;!y(r,o)&&b(r,i,i.next,o)&&N(r,o)&&N(o,r)&&(t.push(r.i/n),t.push(i.i/n),t.push(o.i/n),O(i),O(i.next),i=e=o),i=i.next}while(i!==e);return i}function u(e,t,n,i,r,s){var l=e;do{var c=l.next.next;while(c!==l.prev){if(l.i!==c.i&&A(l,c)){var u=S(l,c);return l=o(l,l.next),u=o(u,u.next),a(l,t,n,i,r,s),void a(u,t,n,i,r,s)}c=c.next}l=l.next}while(l!==e)}function h(e,t,n,i){var a,s,l,c,u,h=[];for(a=0,s=t.length;a<s;a++)l=t[a]*i,c=a<s-1?t[a+1]*i:e.length,u=r(e,l,c,i,!1),u===u.next&&(u.steiner=!0),h.push(g(u));for(h.sort(f),a=0;a<h.length;a++)d(h[a],n),n=o(n,n.next);return n}function f(e,t){return e.x-t.x}function d(e,t){if(t=m(e,t),t){var n=S(t,e);o(n,n.next)}}function m(e,t){var n,i=t,r=e.x,o=e.y,a=-1/0;do{if(o<=i.y&&o>=i.next.y&&i.next.y!==i.y){var s=i.x+(o-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(s<=r&&s>a){if(a=s,s===r){if(o===i.y)return i;if(o===i.next.y)return i.next}n=i.x<i.next.x?i:i.next}}i=i.next}while(i!==t);if(!n)return null;if(r===a)return n.prev;var l,c=n,u=n.x,h=n.y,f=1/0;i=n.next;while(i!==c)r>=i.x&&i.x>=u&&r!==i.x&&x(o<h?r:a,o,u,h,o<h?a:r,o,i.x,i.y)&&(l=Math.abs(o-i.y)/(r-i.x),(l<f||l===f&&i.x>n.x)&&N(i,e)&&(n=i,f=l)),i=i.next;return n}function p(e,t,n,i){var r=e;do{null===r.z&&(r.z=v(r.x,r.y,t,n,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==e);r.prevZ.nextZ=null,r.prevZ=null,_(r)}function _(e){var t,n,i,r,o,a,s,l,c=1;do{n=e,e=null,o=null,a=0;while(n){for(a++,i=n,s=0,t=0;t<c;t++)if(s++,i=i.nextZ,!i)break;l=c;while(s>0||l>0&&i)0!==s&&(0===l||!i||n.z<=i.z)?(r=n,n=n.nextZ,s--):(r=i,i=i.nextZ,l--),o?o.nextZ=r:e=r,r.prevZ=o,o=r;n=i}o.nextZ=null,c*=2}while(a>1);return e}function v(e,t,n,i,r){return e=32767*(e-n)/r,t=32767*(t-i)/r,e=16711935&(e|e<<8),e=252645135&(e|e<<4),e=858993459&(e|e<<2),e=1431655765&(e|e<<1),t=16711935&(t|t<<8),t=252645135&(t|t<<4),t=858993459&(t|t<<2),t=1431655765&(t|t<<1),e|t<<1}function g(e){var t=e,n=e;do{t.x<n.x&&(n=t),t=t.next}while(t!==e);return n}function x(e,t,n,i,r,o,a,s){return(r-a)*(t-s)-(e-a)*(o-s)>=0&&(e-a)*(i-s)-(n-a)*(t-s)>=0&&(n-a)*(o-s)-(r-a)*(i-s)>=0}function A(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!w(e,t)&&N(e,t)&&N(t,e)&&C(e,t)}function T(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function y(e,t){return e.x===t.x&&e.y===t.y}function b(e,t,n,i){return!!(y(e,t)&&y(n,i)||y(e,i)&&y(n,t))||T(e,t,n)>0!==T(e,t,i)>0&&T(n,i,e)>0!==T(n,i,t)>0}function w(e,t){var n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&b(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}function N(e,t){return T(e.prev,e,e.next)<0?T(e,t,e.next)>=0&&T(e,e.prev,t)>=0:T(e,t,e.prev)<0||T(e,e.next,t)<0}function C(e,t){var n=e,i=!1,r=(e.x+t.x)/2,o=(e.y+t.y)/2;do{n.y>o!==n.next.y>o&&n.next.y!==n.y&&r<(n.next.x-n.x)*(o-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==e);return i}function S(e,t){var n=new P(e.i,e.x,e.y),i=new P(t.i,t.x,t.y),r=e.next,o=t.prev;return e.next=t,t.prev=e,n.next=r,r.prev=n,i.next=n,n.prev=i,o.next=i,i.prev=o,i}function E(e,t,n,i){var r=new P(e,t,n);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function O(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function P(e,t,n){this.i=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function L(e,t,n,i){for(var r=0,o=t,a=n-i;o<n;o+=i)r+=(e[a]-e[o])*(e[o+1]+e[a+1]),a=o;return r}t.A=i,i.deviation=function(e,t,n,i){var r=t&&t.length,o=r?t[0]*n:e.length,a=Math.abs(L(e,0,o,n));if(r)for(var s=0,l=t.length;s<l;s++){var c=t[s]*n,u=s<l-1?t[s+1]*n:e.length;a-=Math.abs(L(e,c,u,n))}var h=0;for(s=0;s<i.length;s+=3){var f=i[s]*n,d=i[s+1]*n,m=i[s+2]*n;h+=Math.abs((e[f]-e[m])*(e[d+1]-e[f+1])-(e[f]-e[d])*(e[m+1]-e[f+1]))}return 0===a&&0===h?0:Math.abs((h-a)/a)}},31550:function(e,t,n){var i=n(85811),r={getFormattedLabel:function(e,t,n,r,o){n=n||"normal";var a=e.getData(r),s=a.getItemModel(t),l=e.getDataParams(t,r);null!=o&&l.value instanceof Array&&(l.value=l.value[o]);var c,u=s.get("normal"===n?["label","formatter"]:["emphasis","label","formatter"]);return null==u&&(u=s.get(["label","formatter"])),"function"===typeof u?(l.status=n,c=u(l)):"string"===typeof u&&(c=i.GP.formatTpl(u,l)),c},normalizeToArray:function(e){return e instanceof Array?e:null==e?[]:[e]}};t.A=r},40981:function(e,t,n){n(44114),n(16573),n(78100),n(77936),n(37467),n(44732),n(79577);var i=n(85811),r=n(60911),o=n(30510),a=n(21788),s=n(73737),l=s.A.vec3,c=s.A.mat3,u=a.A.extend((function(){return{attributes:{position:new a.A.Attribute("position","float",3,"POSITION"),normal:new a.A.Attribute("normal","float",3,"NORMAL"),color:new a.A.Attribute("color","float",4,"COLOR"),prevPosition:new a.A.Attribute("prevPosition","float",3),prevNormal:new a.A.Attribute("prevNormal","float",3)},dynamic:!0,enableNormal:!1,bevelSize:1,bevelSegments:0,_dataIndices:null,_vertexOffset:0,_triangleOffset:0}}),{resetOffset:function(){this._vertexOffset=0,this._triangleOffset=0},setBarCount:function(e){var t=this.enableNormal,n=this.getBarVertexCount()*e,i=this.getBarTriangleCount()*e;this.vertexCount!==n&&(this.attributes.position.init(n),t?this.attributes.normal.init(n):this.attributes.normal.value=null,this.attributes.color.init(n)),this.triangleCount!==i&&(this.indices=n>65535?new Uint32Array(3*i):new Uint16Array(3*i),this._dataIndices=new Uint32Array(n))},getBarVertexCount:function(){var e=this.bevelSize>0?this.bevelSegments:0;return e>0?this._getBevelBarVertexCount(e):this.enableNormal?24:8},getBarTriangleCount:function(){var e=this.bevelSize>0?this.bevelSegments:0;return e>0?this._getBevelBarTriangleCount(e):12},_getBevelBarVertexCount:function(e){return 4*(e+1)*(e+1)*2},_getBevelBarTriangleCount:function(e){var t=4*e+3,n=2*e+1;return(t+1)*n*2+4},setColor:function(e,t){for(var n=this.getBarVertexCount(),i=n*e,r=n*(e+1),o=i;o<r;o++)this.attributes.color.set(o,t);this.dirtyAttribute("color")},getDataIndexOfVertex:function(e){return this._dataIndices?this._dataIndices[e]:null},addBar:function(){for(var e=l.create,t=l.scaleAndAdd,n=e(),i=e(),r=e(),o=e(),a=e(),s=e(),c=e(),u=[],h=[],f=0;f<8;f++)u[f]=e();var d=[[0,1,5,4],[2,3,7,6],[4,5,6,7],[3,2,1,0],[0,4,7,3],[1,2,6,5]],m=[0,1,2,0,2,3],p=[];for(f=0;f<d.length;f++)for(var _=d[f],v=0;v<2;v++){for(var g=[],x=0;x<3;x++)g.push(_[m[3*v+x]]);p.push(g)}return function(e,f,_,v,g,x){var A=this._vertexOffset;if(this.bevelSize>0&&this.bevelSegments>0)this._addBevelBar(e,f,_,v,this.bevelSize,this.bevelSegments,g);else{l.copy(r,f),l.normalize(r,r),l.cross(o,_,r),l.normalize(o,o),l.cross(i,r,o),l.normalize(o,o),l.negate(a,i),l.negate(s,r),l.negate(c,o),t(u[0],e,i,v[0]/2),t(u[0],u[0],o,v[2]/2),t(u[1],e,i,v[0]/2),t(u[1],u[1],c,v[2]/2),t(u[2],e,a,v[0]/2),t(u[2],u[2],c,v[2]/2),t(u[3],e,a,v[0]/2),t(u[3],u[3],o,v[2]/2),t(n,e,r,v[1]),t(u[4],n,i,v[0]/2),t(u[4],u[4],o,v[2]/2),t(u[5],n,i,v[0]/2),t(u[5],u[5],c,v[2]/2),t(u[6],n,a,v[0]/2),t(u[6],u[6],c,v[2]/2),t(u[7],n,a,v[0]/2),t(u[7],u[7],o,v[2]/2);var T=this.attributes;if(this.enableNormal){h[0]=i,h[1]=a,h[2]=r,h[3]=s,h[4]=o,h[5]=c;for(var y=this._vertexOffset,b=0;b<d.length;b++){for(var w=3*this._triangleOffset,N=0;N<6;N++)this.indices[w++]=y+m[N];y+=4,this._triangleOffset+=2}for(b=0;b<d.length;b++){var C=h[b];for(N=0;N<4;N++){var S=d[b][N];T.position.set(this._vertexOffset,u[S]),T.normal.set(this._vertexOffset,C),T.color.set(this._vertexOffset++,g)}}}else{for(b=0;b<p.length;b++){for(w=3*this._triangleOffset,N=0;N<3;N++)this.indices[w+N]=p[b][N]+this._vertexOffset;this._triangleOffset++}for(b=0;b<u.length;b++)T.position.set(this._vertexOffset,u[b]),T.color.set(this._vertexOffset++,g)}}var E=this._vertexOffset;for(b=A;b<E;b++)this._dataIndices[b]=x}}(),_addBevelBar:function(){var e=l.create(),t=l.create(),n=l.create(),i=c.create(),r=[],o=[1,-1,-1,1],a=[1,1,-1,-1],s=[2,0];return function(c,u,h,f,d,m,p){l.copy(t,u),l.normalize(t,t),l.cross(n,h,t),l.normalize(n,n),l.cross(e,t,n),l.normalize(n,n),i[0]=e[0],i[1]=e[1],i[2]=e[2],i[3]=t[0],i[4]=t[1],i[5]=t[2],i[6]=n[0],i[7]=n[1],i[8]=n[2],d=Math.min(f[0],f[2])/2*d;for(var _=0;_<3;_++)r[_]=Math.max(f[_]-2*d,0);var v=(f[0]-r[0])/2,g=(f[1]-r[1])/2,x=(f[2]-r[2])/2,A=[],T=[],y=this._vertexOffset,b=[];for(_=0;_<2;_++){b[_]=b[_]=[];for(var w=0;w<=m;w++)for(var N=0;N<4;N++){(0===w&&0===_||1===_&&w===m)&&b[_].push(y);for(var C=0;C<=m;C++){var S=C/m*Math.PI/2+Math.PI/2*N,E=w/m*Math.PI/2+Math.PI/2*_;T[0]=v*Math.cos(S)*Math.sin(E),T[1]=g*Math.cos(E),T[2]=x*Math.sin(S)*Math.sin(E),A[0]=T[0]+o[N]*r[0]/2,A[1]=T[1]+g+s[_]*r[1]/2,A[2]=T[2]+a[N]*r[2]/2,Math.abs(v-g)<1e-6&&Math.abs(g-x)<1e-6||(T[0]/=v*v,T[1]/=g*g,T[2]/=x*x),l.normalize(T,T),l.transformMat3(A,A,i),l.transformMat3(T,T,i),l.add(A,A,c),this.attributes.position.set(y,A),this.enableNormal&&this.attributes.normal.set(y,T),this.attributes.color.set(y,p),y++}}}var O=4*m+3,P=2*m+1,L=O+1;for(N=0;N<P;N++)for(_=0;_<=O;_++){var D=N*L+_+this._vertexOffset,M=N*L+(_+1)%L+this._vertexOffset,R=(N+1)*L+(_+1)%L+this._vertexOffset,I=(N+1)*L+_+this._vertexOffset;this.setTriangleIndices(this._triangleOffset++,[R,D,M]),this.setTriangleIndices(this._triangleOffset++,[R,I,D])}this.setTriangleIndices(this._triangleOffset++,[b[0][0],b[0][2],b[0][1]]),this.setTriangleIndices(this._triangleOffset++,[b[0][0],b[0][3],b[0][2]]),this.setTriangleIndices(this._triangleOffset++,[b[1][0],b[1][1],b[1][2]]),this.setTriangleIndices(this._triangleOffset++,[b[1][0],b[1][2],b[1][3]]),this._vertexOffset=y}}()});i.ZS.defaults(u.prototype,r.A),i.ZS.defaults(u.prototype,o.A),t.A=u},1163:function(e,t,n){n(44114),n(16573),n(78100),n(77936),n(37467),n(44732),n(79577);var i=n(21788),r=n(85811),o=n(60911),a=n(73737),s=a.A.vec2,l=[[0,0],[1,1]],c=i.A.extend((function(){return{segmentScale:4,dynamic:!0,useNativeLine:!0,attributes:{position:new i.A.Attribute("position","float",2,"POSITION"),normal:new i.A.Attribute("normal","float",2),offset:new i.A.Attribute("offset","float",1),color:new i.A.Attribute("color","float",4,"COLOR")}}}),{resetOffset:function(){this._vertexOffset=0,this._faceOffset=0,this._itemVertexOffsets=[]},setVertexCount:function(e){var t=this.attributes;this.vertexCount!==e&&(t.position.init(e),t.color.init(e),this.useNativeLine||(t.offset.init(e),t.normal.init(e)),e>65535?this.indices instanceof Uint16Array&&(this.indices=new Uint32Array(this.indices)):this.indices instanceof Uint32Array&&(this.indices=new Uint16Array(this.indices)))},setTriangleCount:function(e){this.triangleCount!==e&&(this.indices=0===e?null:this.vertexCount>65535?new Uint32Array(3*e):new Uint16Array(3*e))},_getCubicCurveApproxStep:function(e,t,n,i){var r=s.dist(e,t)+s.dist(n,t)+s.dist(i,n),o=1/(r+1)*this.segmentScale;return o},getCubicCurveVertexCount:function(e,t,n,i){var r=this._getCubicCurveApproxStep(e,t,n,i),o=Math.ceil(1/r);return this.useNativeLine?2*o:2*o+2},getCubicCurveTriangleCount:function(e,t,n,i){var r=this._getCubicCurveApproxStep(e,t,n,i),o=Math.ceil(1/r);return this.useNativeLine?0:2*o},getLineVertexCount:function(){return this.getPolylineVertexCount(l)},getLineTriangleCount:function(){return this.getPolylineTriangleCount(l)},getPolylineVertexCount:function(e){var t;if("number"===typeof e)t=e;else{var n="number"!==typeof e[0];t=n?e.length:e.length/2}return this.useNativeLine?2*(t-1):2*(t-1)+2},getPolylineTriangleCount:function(e){var t;if("number"===typeof e)t=e;else{var n="number"!==typeof e[0];t=n?e.length:e.length/2}return this.useNativeLine?0:2*(t-1)},addCubicCurve:function(e,t,n,i,r,o){null==o&&(o=1);var a=e[0],s=e[1],l=t[0],c=t[1],u=n[0],h=n[1],f=i[0],d=i[1],m=this._getCubicCurveApproxStep(e,t,n,i),p=m*m,_=p*m,v=3*m,g=3*p,x=6*p,A=6*_,T=a-2*l+u,y=s-2*c+h,b=3*(l-u)-a+f,w=3*(c-h)-s+d,N=a,C=s,S=(l-a)*v+T*g+b*_,E=(c-s)*v+y*g+w*_,O=T*x+b*A,P=y*x+w*A,L=b*A,D=w*A,M=0,R=0,I=Math.ceil(1/m),z=new Float32Array(3*(I+1)),F=(z=[],0);for(R=0;R<I+1;R++)z[F++]=N,z[F++]=C,N+=S,C+=E,S+=O,E+=P,O+=L,P+=D,M+=m,M>1&&(N=S>0?Math.min(N,f):Math.max(N,f),C=E>0?Math.min(C,d):Math.max(C,d));this.addPolyline(z,r,o)},addLine:function(e,t,n,i){this.addPolyline([e,t],n,i)},addPolyline:function(){var e=s.create(),t=s.create(),n=s.create(),i=s.create(),r=[],o=[],a=[];return function(l,c,u,h,f){if(l.length){var d="number"!==typeof l[0];if(null==f&&(f=d?l.length:l.length/2),!(f<2)){null==h&&(h=0),null==u&&(u=1),this._itemVertexOffsets.push(this._vertexOffset);for(var m,p=d?"number"!==typeof c[0]:c.length/4===f,_=this.attributes.position,v=this.attributes.color,g=this.attributes.offset,x=this.attributes.normal,A=this.indices,T=this._vertexOffset,y=0;y<f;y++){if(d)r=l[y+h],m=p?c[y+h]:c;else{var b=2*y+h;if(r=r||[],r[0]=l[b],r[1]=l[b+1],p){var w=4*y+h;m=m||[],m[0]=c[w],m[1]=c[w+1],m[2]=c[w+2],m[3]=c[w+3]}else m=c}if(this.useNativeLine)y>1&&(_.copy(T,T-1),v.copy(T,T-1),T++);else{var N;if(y<f-1){if(d)s.copy(o,l[y+1]);else{b=2*(y+1)+h;o=o||[],o[0]=l[b],o[1]=l[b+1]}if(y>0){s.sub(e,r,a),s.sub(t,o,r),s.normalize(e,e),s.normalize(t,t),s.add(i,e,t),s.normalize(i,i);var C=u/2*Math.min(1/s.dot(e,i),2);n[0]=-i[1],n[1]=i[0],N=C}else s.sub(e,o,r),s.normalize(e,e),n[0]=-e[1],n[1]=e[0],N=u/2}else s.sub(e,r,a),s.normalize(e,e),n[0]=-e[1],n[1]=e[0],N=u/2;x.set(T,n),x.set(T+1,n),g.set(T,N),g.set(T+1,-N),s.copy(a,r),_.set(T,r),_.set(T+1,r),v.set(T,m),v.set(T+1,m),T+=2}if(this.useNativeLine)v.set(T,m),_.set(T,r),T++;else if(y>0){var S=3*this._faceOffset;A=this.indices;A[S]=T-4,A[S+1]=T-3,A[S+2]=T-2,A[S+3]=T-3,A[S+4]=T-1,A[S+5]=T-2,this._faceOffset+=2}}this._vertexOffset=T}}}}(),setItemColor:function(e,t){for(var n=this._itemVertexOffsets[e],i=e<this._itemVertexOffsets.length-1?this._itemVertexOffsets[e+1]:this._vertexOffset,r=n;r<i;r++)this.attributes.color.set(r,t);this.dirty("color")}});r.ZS.defaults(c.prototype,o.A),t.A=c},97758:function(e,t,n){n(44114),n(16573),n(78100),n(77936),n(37467),n(44732),n(79577);var i=n(21788),r=n(85811),o=n(60911),a=n(73737),s=a.A.vec3,l=[[0,0],[1,1]],c=i.A.extend((function(){return{segmentScale:1,dynamic:!0,useNativeLine:!0,attributes:{position:new i.A.Attribute("position","float",3,"POSITION"),positionPrev:new i.A.Attribute("positionPrev","float",3),positionNext:new i.A.Attribute("positionNext","float",3),prevPositionPrev:new i.A.Attribute("prevPositionPrev","float",3),prevPosition:new i.A.Attribute("prevPosition","float",3),prevPositionNext:new i.A.Attribute("prevPositionNext","float",3),offset:new i.A.Attribute("offset","float",1),color:new i.A.Attribute("color","float",4,"COLOR")}}}),{resetOffset:function(){this._vertexOffset=0,this._triangleOffset=0,this._itemVertexOffsets=[]},setVertexCount:function(e){var t=this.attributes;this.vertexCount!==e&&(t.position.init(e),t.color.init(e),this.useNativeLine||(t.positionPrev.init(e),t.positionNext.init(e),t.offset.init(e)),e>65535?this.indices instanceof Uint16Array&&(this.indices=new Uint32Array(this.indices)):this.indices instanceof Uint32Array&&(this.indices=new Uint16Array(this.indices)))},setTriangleCount:function(e){this.triangleCount!==e&&(this.indices=0===e?null:this.vertexCount>65535?new Uint32Array(3*e):new Uint16Array(3*e))},_getCubicCurveApproxStep:function(e,t,n,i){var r=s.dist(e,t)+s.dist(n,t)+s.dist(i,n),o=1/(r+1)*this.segmentScale;return o},getCubicCurveVertexCount:function(e,t,n,i){var r=this._getCubicCurveApproxStep(e,t,n,i),o=Math.ceil(1/r);return this.useNativeLine?2*o:2*o+2},getCubicCurveTriangleCount:function(e,t,n,i){var r=this._getCubicCurveApproxStep(e,t,n,i),o=Math.ceil(1/r);return this.useNativeLine?0:2*o},getLineVertexCount:function(){return this.getPolylineVertexCount(l)},getLineTriangleCount:function(){return this.getPolylineTriangleCount(l)},getPolylineVertexCount:function(e){var t;if("number"===typeof e)t=e;else{var n="number"!==typeof e[0];t=n?e.length:e.length/3}return this.useNativeLine?2*(t-1):2*(t-1)+2},getPolylineTriangleCount:function(e){var t;if("number"===typeof e)t=e;else{var n="number"!==typeof e[0];t=n?e.length:e.length/3}return this.useNativeLine?0:2*Math.max(t-1,0)},addCubicCurve:function(e,t,n,i,r,o){null==o&&(o=1);var a=e[0],s=e[1],l=e[2],c=t[0],u=t[1],h=t[2],f=n[0],d=n[1],m=n[2],p=i[0],_=i[1],v=i[2],g=this._getCubicCurveApproxStep(e,t,n,i),x=g*g,A=x*g,T=3*g,y=3*x,b=6*x,w=6*A,N=a-2*c+f,C=s-2*u+d,S=l-2*h+m,E=3*(c-f)-a+p,O=3*(u-d)-s+_,P=3*(h-m)-l+v,L=a,D=s,M=l,R=(c-a)*T+N*y+E*A,I=(u-s)*T+C*y+O*A,z=(h-l)*T+S*y+P*A,F=N*b+E*w,U=C*b+O*w,B=S*b+P*w,H=E*w,V=O*w,G=P*w,k=0,j=0,W=Math.ceil(1/g),Z=new Float32Array(3*(W+1)),X=(Z=[],0);for(j=0;j<W+1;j++)Z[X++]=L,Z[X++]=D,Z[X++]=M,L+=R,D+=I,M+=z,R+=F,I+=U,z+=B,F+=H,U+=V,B+=G,k+=g,k>1&&(L=R>0?Math.min(L,p):Math.max(L,p),D=I>0?Math.min(D,_):Math.max(D,_),M=z>0?Math.min(M,v):Math.max(M,v));return this.addPolyline(Z,r,o)},addLine:function(e,t,n,i){return this.addPolyline([e,t],n,i)},addPolyline:function(e,t,n,i,r){if(e.length){var o="number"!==typeof e[0];if(null==r&&(r=o?e.length:e.length/3),!(r<2)){null==i&&(i=0),null==n&&(n=1),this._itemVertexOffsets.push(this._vertexOffset);o="number"!==typeof e[0];var a,s,l=o?"number"!==typeof t[0]:t.length/4===r,c=this.attributes.position,u=this.attributes.positionPrev,h=this.attributes.positionNext,f=this.attributes.color,d=this.attributes.offset,m=this.indices,p=this._vertexOffset;n=Math.max(n,.01);for(var _=i;_<r;_++){if(o)a=e[_],s=l?t[_]:t;else{var v=3*_;if(a=a||[],a[0]=e[v],a[1]=e[v+1],a[2]=e[v+2],l){var g=4*_;s=s||[],s[0]=t[g],s[1]=t[g+1],s[2]=t[g+2],s[3]=t[g+3]}else s=t}if(this.useNativeLine?_>1&&(c.copy(p,p-1),f.copy(p,p-1),p++):(_<r-1&&(u.set(p+2,a),u.set(p+3,a)),_>0&&(h.set(p-2,a),h.set(p-1,a)),c.set(p,a),c.set(p+1,a),f.set(p,s),f.set(p+1,s),d.set(p,n/2),d.set(p+1,-n/2),p+=2),this.useNativeLine)f.set(p,s),c.set(p,a),p++;else if(_>0){var x=3*this._triangleOffset;m=this.indices;m[x]=p-4,m[x+1]=p-3,m[x+2]=p-2,m[x+3]=p-3,m[x+4]=p-1,m[x+5]=p-2,this._triangleOffset+=2}}if(!this.useNativeLine){var A=this._vertexOffset,T=this._vertexOffset+2*r;u.copy(A,A+2),u.copy(A+1,A+3),h.copy(T-1,T-3),h.copy(T-2,T-4)}return this._vertexOffset=p,this._vertexOffset}}},setItemColor:function(e,t){for(var n=this._itemVertexOffsets[e],i=e<this._itemVertexOffsets.length-1?this._itemVertexOffsets[e+1]:this._vertexOffset,r=n;r<i;r++)this.attributes.color.set(r,t);this.dirty("color")},currentTriangleOffset:function(){return this._triangleOffset},currentVertexOffset:function(){return this._vertexOffset}});r.ZS.defaults(c.prototype,o.A),t.A=c},81986:function(e,t,n){n(16573),n(78100),n(77936),n(37467),n(44732),n(79577);var i=n(21788),r=n(85811),o=n(60911),a=n(73737),s=a.A.vec3,l=i.A.extend((function(){return{segmentScale:1,useNativeLine:!0,attributes:{position:new i.A.Attribute("position","float",3,"POSITION"),normal:new i.A.Attribute("normal","float",3,"NORMAL"),color:new i.A.Attribute("color","float",4,"COLOR")}}}),{resetOffset:function(){this._vertexOffset=0,this._faceOffset=0},setQuadCount:function(e){var t=this.attributes,n=this.getQuadVertexCount()*e,i=this.getQuadTriangleCount()*e;this.vertexCount!==n&&(t.position.init(n),t.normal.init(n),t.color.init(n)),this.triangleCount!==i&&(this.indices=n>65535?new Uint32Array(3*i):new Uint16Array(3*i))},getQuadVertexCount:function(){return 4},getQuadTriangleCount:function(){return 2},addQuad:function(){var e=s.create(),t=s.create(),n=s.create(),i=[0,3,1,3,2,1];return function(r,o){var a=this.attributes.position,l=this.attributes.normal,c=this.attributes.color;s.sub(e,r[1],r[0]),s.sub(t,r[2],r[1]),s.cross(n,e,t),s.normalize(n,n);for(var u=0;u<4;u++)a.set(this._vertexOffset+u,r[u]),c.set(this._vertexOffset+u,o),l.set(this._vertexOffset+u,n);var h=3*this._faceOffset;for(u=0;u<6;u++)this.indices[h+u]=i[u]+this._vertexOffset;this._vertexOffset+=4,this._faceOffset+=2}}()});r.ZS.defaults(l.prototype,o.A),t.A=l},60911:function(e,t,n){n(16573),n(78100),n(77936),n(37467),n(44732),n(79577);t.A={convertToDynamicArray:function(e){e&&this.resetOffset();var t=this.attributes;for(var n in t)e||!t[n].value?t[n].value=[]:t[n].value=Array.prototype.slice.call(t[n].value);e||!this.indices?this.indices=[]:this.indices=Array.prototype.slice.call(this.indices)},convertToTypedArray:function(){var e=this.attributes;for(var t in e)e[t].value&&e[t].value.length>0?e[t].value=new Float32Array(e[t].value):e[t].value=null;this.indices&&this.indices.length>0&&(this.indices=this.vertexCount>65535?new Uint32Array(this.indices):new Uint16Array(this.indices)),this.dirty()}}},30510:function(e,t,n){n(16573),n(78100),n(77936),n(37467),n(44732),n(79577);var i=n(35055),r=n(73737),o=r.A.vec3,a=o.create(),s=o.create(),l=o.create();t.A={needsSortTriangles:function(){return this.indices&&this.sortTriangles},needsSortTrianglesProgressively:function(){return this.needsSortTriangles()&&this.triangleCount>=2e4},doSortTriangles:function(e,t){var n=this.indices;if(0===t){var i=this.attributes.position;e=e.array;this._triangleZList&&this._triangleZList.length===this.triangleCount||(this._triangleZList=new Float32Array(this.triangleCount),this._sortedTriangleIndices=new Uint32Array(this.triangleCount),this._indicesTmp=new n.constructor(n.length),this._triangleZListTmp=new Float32Array(this.triangleCount));for(var r,c=0,u=0;u<n.length;){i.get(n[u++],a),i.get(n[u++],s),i.get(n[u++],l);var h=o.sqrDist(a,e),f=o.sqrDist(s,e),d=o.sqrDist(l,e),m=Math.min(h,f);m=Math.min(m,d),3===u?(r=m,m=0):m-=r,this._triangleZList[c++]=m}}var p=this._sortedTriangleIndices;for(u=0;u<p.length;u++)p[u]=u;if(this.triangleCount<2e4)0===t&&this._simpleSort(!0);else for(u=0;u<3;u++)this._progressiveQuickSort(3*t+u);var _=this._indicesTmp,v=this._triangleZListTmp,g=this._triangleZList;for(u=0;u<this.triangleCount;u++){var x=3*p[u],A=3*u;_[A++]=n[x++],_[A++]=n[x++],_[A]=n[x],v[u]=g[p[u]]}var T=this._indicesTmp;this._indicesTmp=this.indices,this.indices=T;T=this._triangleZListTmp;this._triangleZListTmp=this._triangleZList,this._triangleZList=T,this.dirtyIndices()},_simpleSort:function(e){var t=this._triangleZList,n=this._sortedTriangleIndices;function r(e,n){return t[n]-t[e]}e?Array.prototype.sort.call(n,r):i.A.sort(n,r,0,n.length-1)},_progressiveQuickSort:function(e){var t=this._triangleZList,n=this._sortedTriangleIndices;this._quickSort=this._quickSort||new i.A,this._quickSort.step(n,(function(e,n){return t[n]-t[e]}),e)}}},47430:function(e,t,n){n(16573),n(78100),n(77936),n(37467),n(44732),n(79577);var i=n(35055),r=n(73737),o=r.A.vec3;t.A={needsSortVertices:function(){return this.sortVertices},needsSortVerticesProgressively:function(){return this.needsSortVertices()&&this.vertexCount>=2e4},doSortVertices:function(e,t){var n=this.indices,i=o.create();if(!n){n=this.indices=this.vertexCount>65535?new Uint32Array(this.vertexCount):new Uint16Array(this.vertexCount);for(var r=0;r<n.length;r++)n[r]=r}if(0===t){var a,s=this.attributes.position,l=(e=e.array,0);this._zList&&this._zList.length===this.vertexCount||(this._zList=new Float32Array(this.vertexCount));for(r=0;r<this.vertexCount;r++){s.get(r,i);var c=o.sqrDist(i,e);isNaN(c)&&(c=1e7,l++),0===r?(a=c,c=0):c-=a,this._zList[r]=c}this._noneCount=l}if(this.vertexCount<2e4)0===t&&this._simpleSort(this._noneCount/this.vertexCount>.05);else for(r=0;r<3;r++)this._progressiveQuickSort(3*t+r);this.dirtyIndices()},_simpleSort:function(e){var t=this._zList,n=this.indices;function r(e,n){return t[n]-t[e]}e?Array.prototype.sort.call(n,r):i.A.sort(n,r,0,n.length-1)},_progressiveQuickSort:function(e){var t=this._zList,n=this.indices;this._quickSort=this._quickSort||new i.A,this._quickSort.step(n,(function(e,n){return t[n]-t[e]}),e)}}},9489:function(e,t,n){n.d(t,{A:function(){return he}});n(44114);var i=n(83992),r=n(68640),o=n(33672),a=n(68718),s=n(50296),l=n(5148),c=n(55393),u=n(21788),h=n(85811),f=n(41277),d=n(85760),m=n(15501),p=n(504),_=n(34863),v=["mousedown","mouseup","mousemove","mouseover","mouseout","click","dblclick","contextmenu"];function g(e){return"_on"+e}var x=function(e){var t=this;this._texture=new o.A({anisotropic:32,flipY:!1,surface:this,dispose:function(e){t.dispose(),o.A.prototype.dispose.call(this,e)}}),v.forEach((function(e){this[g(e)]=function(t){t.triangle&&this._meshes.forEach((function(n){this.dispatchEvent(e,n,t.triangle,t.point)}),this)}}),this),this._meshes=[],e&&this.setECharts(e),this.onupdate=null};x.prototype={constructor:x,getTexture:function(){return this._texture},setECharts:function(e){this._chart=e;var t=e.getDom();if(t instanceof HTMLCanvasElement){var n=this,i=e.getZr(),r=i.__oldRefreshImmediately||i.refreshImmediately;i.refreshImmediately=function(){r.call(this),n._texture.dirty(),n.onupdate&&n.onupdate()},i.__oldRefreshImmediately=r}else console.error("ECharts must init on canvas if it is used as texture."),t=document.createElement("canvas");this._texture.image=t,this._texture.dirty(),this.onupdate&&this.onupdate()},dispatchEvent:function(){var e=new p.A,t=new p.A,n=new p.A,i=new _.A,r=new _.A,o=new _.A,a=new _.A,s=new p.A;return function(l,c,u,h){var f=c.geometry,d=f.attributes.position,m=f.attributes.texcoord0,v=p.A.dot,g=p.A.cross;d.get(u[0],e.array),d.get(u[1],t.array),d.get(u[2],n.array),m.get(u[0],i.array),m.get(u[1],r.array),m.get(u[2],o.array),g(s,t,n);var x=v(e,s),A=v(h,s)/x;g(s,n,e);var T=v(h,s)/x;g(s,e,t);var y=v(h,s)/x;_.A.scale(a,i,A),_.A.scaleAndAdd(a,a,r,T),_.A.scaleAndAdd(a,a,o,y);var b=a.x*this._chart.getWidth(),w=a.y*this._chart.getHeight();this._chart.getZr().handler.dispatch(l,{zrX:b,zrY:w})}}(),attachToMesh:function(e){this._meshes.indexOf(e)>=0||(v.forEach((function(t){e.on(t,this[g(t)],this)}),this),this._meshes.push(e))},detachFromMesh:function(e){var t=this._meshes.indexOf(e);t>=0&&this._meshes.splice(t,1),v.forEach((function(t){e.off(t,this[g(t)])}),this)},dispose:function(){this._meshes.forEach((function(e){this.detachFromMesh(e)}),this)}};var A=x,T=n(1737),y=n(8241),b=n(12495),w=n(69665),N=n(22041),C=n(13360),S=n(36097),E=n(31934),O=n(91266),P=n(81248),L=n(20624),D=n(82223),M=n(16631),R=n(57709),I=n(30630),z=n(67277),F=n(90573),U=n(41262),B=n(21647),H=n(92830),V=n(56044),G=n(47797),k=n(78174),j=n(39875),W={_animators:null,getAnimators:function(){return this._animators=this._animators||[],this._animators},animate:function(e,t){this._animators=this._animators||[];var n,i=this;if(e){for(var r=e.split("."),o=i,a=0,s=r.length;a<s;a++)o&&(o=o[r[a]]);o&&(n=o)}else n=i;if(null==n)throw new Error("Target "+e+" not exists");var l=this._animators,c=new j.A(n,t),u=this;return c.during((function(){u.__zr&&u.__zr.refresh()})).done((function(){var e=l.indexOf(c);e>=0&&l.splice(e,1)})),l.push(c),this.__zr&&this.__zr.animation.addAnimator(c),c},stopAnimation:function(e){this._animators=this._animators||[];for(var t=this._animators,n=t.length,i=0;i<n;i++)t[i].stop(e);return t.length=0,this},addAnimatorsToZr:function(e){if(this._animators)for(var t=0;t<this._animators.length;t++)e.animation.addAnimator(this._animators[t])},removeAnimatorsFromZr:function(e){if(this._animators)for(var t=0;t<this._animators.length;t++)e.animation.removeAnimator(this._animators[t])}},Z=W,X=n(47595),Y=n(448),Q="\n@export ecgl.common.transformUniforms\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform mat4 worldInverseTranspose : WORLDINVERSETRANSPOSE;\nuniform mat4 world : WORLD;\n@end\n\n@export ecgl.common.attributes\nattribute vec3 position : POSITION;\nattribute vec2 texcoord : TEXCOORD_0;\nattribute vec3 normal : NORMAL;\n@end\n\n@export ecgl.common.uv.header\nuniform vec2 uvRepeat : [1.0, 1.0];\nuniform vec2 uvOffset : [0.0, 0.0];\nuniform vec2 detailUvRepeat : [1.0, 1.0];\nuniform vec2 detailUvOffset : [0.0, 0.0];\n\nvarying vec2 v_Texcoord;\nvarying vec2 v_DetailTexcoord;\n@end\n\n@export ecgl.common.uv.main\nv_Texcoord = texcoord * uvRepeat + uvOffset;\nv_DetailTexcoord = texcoord * detailUvRepeat + detailUvOffset;\n@end\n\n@export ecgl.common.uv.fragmentHeader\nvarying vec2 v_Texcoord;\nvarying vec2 v_DetailTexcoord;\n@end\n\n\n@export ecgl.common.albedo.main\n\n vec4 albedoTexel = vec4(1.0);\n#ifdef DIFFUSEMAP_ENABLED\n albedoTexel = texture2D(diffuseMap, v_Texcoord);\n #ifdef SRGB_DECODE\n albedoTexel = sRGBToLinear(albedoTexel);\n #endif\n#endif\n\n#ifdef DETAILMAP_ENABLED\n vec4 detailTexel = texture2D(detailMap, v_DetailTexcoord);\n #ifdef SRGB_DECODE\n detailTexel = sRGBToLinear(detailTexel);\n #endif\n albedoTexel.rgb = mix(albedoTexel.rgb, detailTexel.rgb, detailTexel.a);\n albedoTexel.a = detailTexel.a + (1.0 - detailTexel.a) * albedoTexel.a;\n#endif\n\n@end\n\n@export ecgl.common.wireframe.vertexHeader\n\n#ifdef WIREFRAME_QUAD\nattribute vec4 barycentric;\nvarying vec4 v_Barycentric;\n#elif defined(WIREFRAME_TRIANGLE)\nattribute vec3 barycentric;\nvarying vec3 v_Barycentric;\n#endif\n\n@end\n\n@export ecgl.common.wireframe.vertexMain\n\n#if defined(WIREFRAME_QUAD) || defined(WIREFRAME_TRIANGLE)\n v_Barycentric = barycentric;\n#endif\n\n@end\n\n\n@export ecgl.common.wireframe.fragmentHeader\n\nuniform float wireframeLineWidth : 1;\nuniform vec4 wireframeLineColor: [0, 0, 0, 0.5];\n\n#ifdef WIREFRAME_QUAD\nvarying vec4 v_Barycentric;\nfloat edgeFactor () {\n vec4 d = fwidth(v_Barycentric);\n vec4 a4 = smoothstep(vec4(0.0), d * wireframeLineWidth, v_Barycentric);\n return min(min(min(a4.x, a4.y), a4.z), a4.w);\n}\n#elif defined(WIREFRAME_TRIANGLE)\nvarying vec3 v_Barycentric;\nfloat edgeFactor () {\n vec3 d = fwidth(v_Barycentric);\n vec3 a3 = smoothstep(vec3(0.0), d * wireframeLineWidth, v_Barycentric);\n return min(min(a3.x, a3.y), a3.z);\n}\n#endif\n\n@end\n\n\n@export ecgl.common.wireframe.fragmentMain\n\n#if defined(WIREFRAME_QUAD) || defined(WIREFRAME_TRIANGLE)\n if (wireframeLineWidth > 0.) {\n vec4 lineColor = wireframeLineColor;\n#ifdef SRGB_DECODE\n lineColor = sRGBToLinear(lineColor);\n#endif\n\n gl_FragColor.rgb = mix(gl_FragColor.rgb, lineColor.rgb, (1.0 - edgeFactor()) * lineColor.a);\n }\n#endif\n@end\n\n\n\n\n@export ecgl.common.bumpMap.header\n\n#ifdef BUMPMAP_ENABLED\nuniform sampler2D bumpMap;\nuniform float bumpScale : 1.0;\n\n\nvec3 bumpNormal(vec3 surfPos, vec3 surfNormal, vec3 baseNormal)\n{\n vec2 dSTdx = dFdx(v_Texcoord);\n vec2 dSTdy = dFdy(v_Texcoord);\n\n float Hll = bumpScale * texture2D(bumpMap, v_Texcoord).x;\n float dHx = bumpScale * texture2D(bumpMap, v_Texcoord + dSTdx).x - Hll;\n float dHy = bumpScale * texture2D(bumpMap, v_Texcoord + dSTdy).x - Hll;\n\n vec3 vSigmaX = dFdx(surfPos);\n vec3 vSigmaY = dFdy(surfPos);\n vec3 vN = surfNormal;\n\n vec3 R1 = cross(vSigmaY, vN);\n vec3 R2 = cross(vN, vSigmaX);\n\n float fDet = dot(vSigmaX, R1);\n\n vec3 vGrad = sign(fDet) * (dHx * R1 + dHy * R2);\n return normalize(abs(fDet) * baseNormal - vGrad);\n\n}\n#endif\n\n@end\n\n@export ecgl.common.normalMap.vertexHeader\n\n#ifdef NORMALMAP_ENABLED\nattribute vec4 tangent : TANGENT;\nvarying vec3 v_Tangent;\nvarying vec3 v_Bitangent;\n#endif\n\n@end\n\n@export ecgl.common.normalMap.vertexMain\n\n#ifdef NORMALMAP_ENABLED\n if (dot(tangent, tangent) > 0.0) {\n v_Tangent = normalize((worldInverseTranspose * vec4(tangent.xyz, 0.0)).xyz);\n v_Bitangent = normalize(cross(v_Normal, v_Tangent) * tangent.w);\n }\n#endif\n\n@end\n\n\n@export ecgl.common.normalMap.fragmentHeader\n\n#ifdef NORMALMAP_ENABLED\nuniform sampler2D normalMap;\nvarying vec3 v_Tangent;\nvarying vec3 v_Bitangent;\n#endif\n\n@end\n\n@export ecgl.common.normalMap.fragmentMain\n#ifdef NORMALMAP_ENABLED\n if (dot(v_Tangent, v_Tangent) > 0.0) {\n vec3 normalTexel = texture2D(normalMap, v_DetailTexcoord).xyz;\n if (dot(normalTexel, normalTexel) > 0.0) { N = normalTexel * 2.0 - 1.0;\n mat3 tbn = mat3(v_Tangent, v_Bitangent, v_Normal);\n N = normalize(tbn * N);\n }\n }\n#endif\n@end\n\n\n\n@export ecgl.common.vertexAnimation.header\n\n#ifdef VERTEX_ANIMATION\nattribute vec3 prevPosition;\nattribute vec3 prevNormal;\nuniform float percent;\n#endif\n\n@end\n\n@export ecgl.common.vertexAnimation.main\n\n#ifdef VERTEX_ANIMATION\n vec3 pos = mix(prevPosition, position, percent);\n vec3 norm = mix(prevNormal, normal, percent);\n#else\n vec3 pos = position;\n vec3 norm = normal;\n#endif\n\n@end\n\n\n@export ecgl.common.ssaoMap.header\n#ifdef SSAOMAP_ENABLED\nuniform sampler2D ssaoMap;\nuniform vec4 viewport : VIEWPORT;\n#endif\n@end\n\n@export ecgl.common.ssaoMap.main\n float ao = 1.0;\n#ifdef SSAOMAP_ENABLED\n ao = texture2D(ssaoMap, (gl_FragCoord.xy - viewport.xy) / viewport.zw).r;\n#endif\n@end\n\n\n\n\n@export ecgl.common.diffuseLayer.header\n\n#if (LAYER_DIFFUSEMAP_COUNT > 0)\nuniform float layerDiffuseIntensity[LAYER_DIFFUSEMAP_COUNT];\nuniform sampler2D layerDiffuseMap[LAYER_DIFFUSEMAP_COUNT];\n#endif\n\n@end\n\n@export ecgl.common.emissiveLayer.header\n\n#if (LAYER_EMISSIVEMAP_COUNT > 0)\nuniform float layerEmissionIntensity[LAYER_EMISSIVEMAP_COUNT];\nuniform sampler2D layerEmissiveMap[LAYER_EMISSIVEMAP_COUNT];\n#endif\n\n@end\n\n@export ecgl.common.layers.header\n@import ecgl.common.diffuseLayer.header\n@import ecgl.common.emissiveLayer.header\n@end\n\n@export ecgl.common.diffuseLayer.main\n\n#if (LAYER_DIFFUSEMAP_COUNT > 0)\n for (int _idx_ = 0; _idx_ < LAYER_DIFFUSEMAP_COUNT; _idx_++) {{\n float intensity = layerDiffuseIntensity[_idx_];\n vec4 texel2 = texture2D(layerDiffuseMap[_idx_], v_Texcoord);\n #ifdef SRGB_DECODE\n texel2 = sRGBToLinear(texel2);\n #endif\n albedoTexel.rgb = mix(albedoTexel.rgb, texel2.rgb * intensity, texel2.a);\n albedoTexel.a = texel2.a + (1.0 - texel2.a) * albedoTexel.a;\n }}\n#endif\n\n@end\n\n@export ecgl.common.emissiveLayer.main\n\n#if (LAYER_EMISSIVEMAP_COUNT > 0)\n for (int _idx_ = 0; _idx_ < LAYER_EMISSIVEMAP_COUNT; _idx_++)\n {{\n vec4 texel2 = texture2D(layerEmissiveMap[_idx_], v_Texcoord) * layerEmissionIntensity[_idx_];\n #ifdef SRGB_DECODE\n texel2 = sRGBToLinear(texel2);\n #endif\n float intensity = layerEmissionIntensity[_idx_];\n gl_FragColor.rgb += texel2.rgb * texel2.a * intensity;\n }}\n#endif\n\n@end\n",q="@export ecgl.color.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\n@import ecgl.common.uv.header\n\nattribute vec2 texcoord : TEXCOORD_0;\nattribute vec3 position: POSITION;\n\n@import ecgl.common.wireframe.vertexHeader\n\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\n#ifdef VERTEX_ANIMATION\nattribute vec3 prevPosition;\nuniform float percent : 1.0;\n#endif\n\n#ifdef ATMOSPHERE_ENABLED\nattribute vec3 normal: NORMAL;\nuniform mat4 worldInverseTranspose : WORLDINVERSETRANSPOSE;\nvarying vec3 v_Normal;\n#endif\n\nvoid main()\n{\n#ifdef VERTEX_ANIMATION\n vec3 pos = mix(prevPosition, position, percent);\n#else\n vec3 pos = position;\n#endif\n\n gl_Position = worldViewProjection * vec4(pos, 1.0);\n\n @import ecgl.common.uv.main\n\n#ifdef VERTEX_COLOR\n v_Color = a_Color;\n#endif\n\n#ifdef ATMOSPHERE_ENABLED\n v_Normal = normalize((worldInverseTranspose * vec4(normal, 0.0)).xyz);\n#endif\n\n @import ecgl.common.wireframe.vertexMain\n\n}\n\n@end\n\n@export ecgl.color.fragment\n\n#define LAYER_DIFFUSEMAP_COUNT 0\n#define LAYER_EMISSIVEMAP_COUNT 0\n\nuniform sampler2D diffuseMap;\nuniform sampler2D detailMap;\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\n#ifdef ATMOSPHERE_ENABLED\nuniform mat4 viewTranspose: VIEWTRANSPOSE;\nuniform vec3 glowColor;\nuniform float glowPower;\nvarying vec3 v_Normal;\n#endif\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\n@import ecgl.common.layers.header\n\n@import ecgl.common.uv.fragmentHeader\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import clay.util.srgb\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n gl_FragColor = sRGBToLinear(color);\n#else\n gl_FragColor = color;\n#endif\n\n#ifdef VERTEX_COLOR\n gl_FragColor *= v_Color;\n#endif\n\n @import ecgl.common.albedo.main\n\n @import ecgl.common.diffuseLayer.main\n\n gl_FragColor *= albedoTexel;\n\n#ifdef ATMOSPHERE_ENABLED\n float atmoIntensity = pow(1.0 - dot(v_Normal, (viewTranspose * vec4(0.0, 0.0, 1.0, 0.0)).xyz), glowPower);\n gl_FragColor.rgb += glowColor * atmoIntensity;\n#endif\n\n @import ecgl.common.emissiveLayer.main\n\n @import ecgl.common.wireframe.fragmentMain\n\n}\n@end",K="/**\n * http: */\n\n@export ecgl.lambert.vertex\n\n@import ecgl.common.transformUniforms\n\n@import ecgl.common.uv.header\n\n\n@import ecgl.common.attributes\n\n@import ecgl.common.wireframe.vertexHeader\n\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\n\n@import ecgl.common.vertexAnimation.header\n\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nvoid main()\n{\n @import ecgl.common.uv.main\n\n @import ecgl.common.vertexAnimation.main\n\n\n gl_Position = worldViewProjection * vec4(pos, 1.0);\n\n v_Normal = normalize((worldInverseTranspose * vec4(norm, 0.0)).xyz);\n v_WorldPosition = (world * vec4(pos, 1.0)).xyz;\n\n#ifdef VERTEX_COLOR\n v_Color = a_Color;\n#endif\n\n @import ecgl.common.wireframe.vertexMain\n}\n\n@end\n\n\n@export ecgl.lambert.fragment\n\n#define LAYER_DIFFUSEMAP_COUNT 0\n#define LAYER_EMISSIVEMAP_COUNT 0\n\n#define NORMAL_UP_AXIS 1\n#define NORMAL_FRONT_AXIS 2\n\n@import ecgl.common.uv.fragmentHeader\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nuniform sampler2D diffuseMap;\nuniform sampler2D detailMap;\n\n@import ecgl.common.layers.header\n\nuniform float emissionIntensity: 1.0;\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nuniform mat4 viewInverse : VIEWINVERSE;\n\n#ifdef ATMOSPHERE_ENABLED\nuniform mat4 viewTranspose: VIEWTRANSPOSE;\nuniform vec3 glowColor;\nuniform float glowPower;\n#endif\n\n#ifdef AMBIENT_LIGHT_COUNT\n@import clay.header.ambient_light\n#endif\n#ifdef AMBIENT_SH_LIGHT_COUNT\n@import clay.header.ambient_sh_light\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n@import clay.header.directional_light\n#endif\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\n\n@import ecgl.common.ssaoMap.header\n\n@import ecgl.common.bumpMap.header\n\n@import clay.util.srgb\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import clay.plugin.compute_shadow_map\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n gl_FragColor = sRGBToLinear(color);\n#else\n gl_FragColor = color;\n#endif\n\n#ifdef VERTEX_COLOR\n #ifdef SRGB_DECODE\n gl_FragColor *= sRGBToLinear(v_Color);\n #else\n gl_FragColor *= v_Color;\n #endif\n#endif\n\n @import ecgl.common.albedo.main\n\n @import ecgl.common.diffuseLayer.main\n\n gl_FragColor *= albedoTexel;\n\n vec3 N = v_Normal;\n#ifdef DOUBLE_SIDED\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(eyePos - v_WorldPosition);\n\n if (dot(N, V) < 0.0) {\n N = -N;\n }\n#endif\n\n float ambientFactor = 1.0;\n\n#ifdef BUMPMAP_ENABLED\n N = bumpNormal(v_WorldPosition, v_Normal, N);\n ambientFactor = dot(v_Normal, N);\n#endif\n\n vec3 N2 = vec3(N.x, N[NORMAL_UP_AXIS], N[NORMAL_FRONT_AXIS]);\n\n vec3 diffuseColor = vec3(0.0, 0.0, 0.0);\n\n @import ecgl.common.ssaoMap.main\n\n#ifdef AMBIENT_LIGHT_COUNT\n for(int i = 0; i < AMBIENT_LIGHT_COUNT; i++)\n {\n diffuseColor += ambientLightColor[i] * ambientFactor * ao;\n }\n#endif\n#ifdef AMBIENT_SH_LIGHT_COUNT\n for(int _idx_ = 0; _idx_ < AMBIENT_SH_LIGHT_COUNT; _idx_++)\n {{\n diffuseColor += calcAmbientSHLight(_idx_, N2) * ambientSHLightColor[_idx_] * ao;\n }}\n#endif\n#ifdef DIRECTIONAL_LIGHT_COUNT\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n float shadowContribsDir[DIRECTIONAL_LIGHT_COUNT];\n if(shadowEnabled)\n {\n computeShadowOfDirectionalLights(v_WorldPosition, shadowContribsDir);\n }\n#endif\n for(int i = 0; i < DIRECTIONAL_LIGHT_COUNT; i++)\n {\n vec3 lightDirection = -directionalLightDirection[i];\n vec3 lightColor = directionalLightColor[i];\n\n float shadowContrib = 1.0;\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n if (shadowEnabled)\n {\n shadowContrib = shadowContribsDir[i];\n }\n#endif\n\n float ndl = dot(N, normalize(lightDirection)) * shadowContrib;\n\n diffuseColor += lightColor * clamp(ndl, 0.0, 1.0);\n }\n#endif\n\n gl_FragColor.rgb *= diffuseColor;\n\n#ifdef ATMOSPHERE_ENABLED\n float atmoIntensity = pow(1.0 - dot(v_Normal, (viewTranspose * vec4(0.0, 0.0, 1.0, 0.0)).xyz), glowPower);\n gl_FragColor.rgb += glowColor * atmoIntensity;\n#endif\n\n @import ecgl.common.emissiveLayer.main\n\n @import ecgl.common.wireframe.fragmentMain\n}\n\n@end",J="@export ecgl.realistic.vertex\n\n@import ecgl.common.transformUniforms\n\n@import ecgl.common.uv.header\n\n@import ecgl.common.attributes\n\n\n@import ecgl.common.wireframe.vertexHeader\n\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\n#ifdef NORMALMAP_ENABLED\nattribute vec4 tangent : TANGENT;\nvarying vec3 v_Tangent;\nvarying vec3 v_Bitangent;\n#endif\n\n@import ecgl.common.vertexAnimation.header\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nvoid main()\n{\n\n @import ecgl.common.uv.main\n\n @import ecgl.common.vertexAnimation.main\n\n gl_Position = worldViewProjection * vec4(pos, 1.0);\n\n v_Normal = normalize((worldInverseTranspose * vec4(norm, 0.0)).xyz);\n v_WorldPosition = (world * vec4(pos, 1.0)).xyz;\n\n#ifdef VERTEX_COLOR\n v_Color = a_Color;\n#endif\n\n#ifdef NORMALMAP_ENABLED\n v_Tangent = normalize((worldInverseTranspose * vec4(tangent.xyz, 0.0)).xyz);\n v_Bitangent = normalize(cross(v_Normal, v_Tangent) * tangent.w);\n#endif\n\n @import ecgl.common.wireframe.vertexMain\n\n}\n\n@end\n\n\n\n@export ecgl.realistic.fragment\n\n#define LAYER_DIFFUSEMAP_COUNT 0\n#define LAYER_EMISSIVEMAP_COUNT 0\n#define PI 3.14159265358979\n#define ROUGHNESS_CHANEL 0\n#define METALNESS_CHANEL 1\n\n#define NORMAL_UP_AXIS 1\n#define NORMAL_FRONT_AXIS 2\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\n@import ecgl.common.uv.fragmentHeader\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nuniform sampler2D diffuseMap;\n\nuniform sampler2D detailMap;\nuniform sampler2D metalnessMap;\nuniform sampler2D roughnessMap;\n\n@import ecgl.common.layers.header\n\nuniform float emissionIntensity: 1.0;\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nuniform float metalness : 0.0;\nuniform float roughness : 0.5;\n\nuniform mat4 viewInverse : VIEWINVERSE;\n\n#ifdef ATMOSPHERE_ENABLED\nuniform mat4 viewTranspose: VIEWTRANSPOSE;\nuniform vec3 glowColor;\nuniform float glowPower;\n#endif\n\n#ifdef AMBIENT_LIGHT_COUNT\n@import clay.header.ambient_light\n#endif\n\n#ifdef AMBIENT_SH_LIGHT_COUNT\n@import clay.header.ambient_sh_light\n#endif\n\n#ifdef AMBIENT_CUBEMAP_LIGHT_COUNT\n@import clay.header.ambient_cubemap_light\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n@import clay.header.directional_light\n#endif\n\n@import ecgl.common.normalMap.fragmentHeader\n\n@import ecgl.common.ssaoMap.header\n\n@import ecgl.common.bumpMap.header\n\n@import clay.util.srgb\n\n@import clay.util.rgbm\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import clay.plugin.compute_shadow_map\n\nvec3 F_Schlick(float ndv, vec3 spec) {\n return spec + (1.0 - spec) * pow(1.0 - ndv, 5.0);\n}\n\nfloat D_Phong(float g, float ndh) {\n float a = pow(8192.0, g);\n return (a + 2.0) / 8.0 * pow(ndh, a);\n}\n\nvoid main()\n{\n vec4 albedoColor = color;\n\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(eyePos - v_WorldPosition);\n#ifdef VERTEX_COLOR\n #ifdef SRGB_DECODE\n albedoColor *= sRGBToLinear(v_Color);\n #else\n albedoColor *= v_Color;\n #endif\n#endif\n\n @import ecgl.common.albedo.main\n\n @import ecgl.common.diffuseLayer.main\n\n albedoColor *= albedoTexel;\n\n float m = metalness;\n\n#ifdef METALNESSMAP_ENABLED\n float m2 = texture2D(metalnessMap, v_DetailTexcoord)[METALNESS_CHANEL];\n m = clamp(m2 + (m - 0.5) * 2.0, 0.0, 1.0);\n#endif\n\n vec3 baseColor = albedoColor.rgb;\n albedoColor.rgb = baseColor * (1.0 - m);\n vec3 specFactor = mix(vec3(0.04), baseColor, m);\n\n float g = 1.0 - roughness;\n\n#ifdef ROUGHNESSMAP_ENABLED\n float g2 = 1.0 - texture2D(roughnessMap, v_DetailTexcoord)[ROUGHNESS_CHANEL];\n g = clamp(g2 + (g - 0.5) * 2.0, 0.0, 1.0);\n#endif\n\n vec3 N = v_Normal;\n\n#ifdef DOUBLE_SIDED\n if (dot(N, V) < 0.0) {\n N = -N;\n }\n#endif\n\n float ambientFactor = 1.0;\n\n#ifdef BUMPMAP_ENABLED\n N = bumpNormal(v_WorldPosition, v_Normal, N);\n ambientFactor = dot(v_Normal, N);\n#endif\n\n@import ecgl.common.normalMap.fragmentMain\n\n vec3 N2 = vec3(N.x, N[NORMAL_UP_AXIS], N[NORMAL_FRONT_AXIS]);\n\n vec3 diffuseTerm = vec3(0.0);\n vec3 specularTerm = vec3(0.0);\n\n float ndv = clamp(dot(N, V), 0.0, 1.0);\n vec3 fresnelTerm = F_Schlick(ndv, specFactor);\n\n @import ecgl.common.ssaoMap.main\n\n#ifdef AMBIENT_LIGHT_COUNT\n for(int _idx_ = 0; _idx_ < AMBIENT_LIGHT_COUNT; _idx_++)\n {{\n diffuseTerm += ambientLightColor[_idx_] * ambientFactor * ao;\n }}\n#endif\n\n#ifdef AMBIENT_SH_LIGHT_COUNT\n for(int _idx_ = 0; _idx_ < AMBIENT_SH_LIGHT_COUNT; _idx_++)\n {{\n diffuseTerm += calcAmbientSHLight(_idx_, N2) * ambientSHLightColor[_idx_] * ao;\n }}\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n float shadowContribsDir[DIRECTIONAL_LIGHT_COUNT];\n if(shadowEnabled)\n {\n computeShadowOfDirectionalLights(v_WorldPosition, shadowContribsDir);\n }\n#endif\n for(int _idx_ = 0; _idx_ < DIRECTIONAL_LIGHT_COUNT; _idx_++)\n {{\n vec3 L = -directionalLightDirection[_idx_];\n vec3 lc = directionalLightColor[_idx_];\n\n vec3 H = normalize(L + V);\n float ndl = clamp(dot(N, normalize(L)), 0.0, 1.0);\n float ndh = clamp(dot(N, H), 0.0, 1.0);\n\n float shadowContrib = 1.0;\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n if (shadowEnabled)\n {\n shadowContrib = shadowContribsDir[_idx_];\n }\n#endif\n\n vec3 li = lc * ndl * shadowContrib;\n\n diffuseTerm += li;\n specularTerm += li * fresnelTerm * D_Phong(g, ndh);\n }}\n#endif\n\n\n#ifdef AMBIENT_CUBEMAP_LIGHT_COUNT\n vec3 L = reflect(-V, N);\n L = vec3(L.x, L[NORMAL_UP_AXIS], L[NORMAL_FRONT_AXIS]);\n float rough2 = clamp(1.0 - g, 0.0, 1.0);\n float bias2 = rough2 * 5.0;\n vec2 brdfParam2 = texture2D(ambientCubemapLightBRDFLookup[0], vec2(rough2, ndv)).xy;\n vec3 envWeight2 = specFactor * brdfParam2.x + brdfParam2.y;\n vec3 envTexel2;\n for(int _idx_ = 0; _idx_ < AMBIENT_CUBEMAP_LIGHT_COUNT; _idx_++)\n {{\n envTexel2 = RGBMDecode(textureCubeLodEXT(ambientCubemapLightCubemap[_idx_], L, bias2), 8.12);\n specularTerm += ambientCubemapLightColor[_idx_] * envTexel2 * envWeight2 * ao;\n }}\n#endif\n\n gl_FragColor.rgb = albedoColor.rgb * diffuseTerm + specularTerm;\n gl_FragColor.a = albedoColor.a;\n\n#ifdef ATMOSPHERE_ENABLED\n float atmoIntensity = pow(1.0 - dot(v_Normal, (viewTranspose * vec4(0.0, 0.0, 1.0, 0.0)).xyz), glowPower);\n gl_FragColor.rgb += glowColor * atmoIntensity;\n#endif\n\n#ifdef SRGB_ENCODE\n gl_FragColor = linearTosRGB(gl_FragColor);\n#endif\n\n @import ecgl.common.emissiveLayer.main\n\n @import ecgl.common.wireframe.fragmentMain\n}\n\n@end",$="@export ecgl.hatching.vertex\n\n@import ecgl.realistic.vertex\n\n@end\n\n\n@export ecgl.hatching.fragment\n\n#define NORMAL_UP_AXIS 1\n#define NORMAL_FRONT_AXIS 2\n\n@import ecgl.common.uv.fragmentHeader\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nuniform vec4 color : [0.0, 0.0, 0.0, 1.0];\nuniform vec4 paperColor : [1.0, 1.0, 1.0, 1.0];\n\nuniform mat4 viewInverse : VIEWINVERSE;\n\n#ifdef AMBIENT_LIGHT_COUNT\n@import clay.header.ambient_light\n#endif\n#ifdef AMBIENT_SH_LIGHT_COUNT\n@import clay.header.ambient_sh_light\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n@import clay.header.directional_light\n#endif\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\n\n@import ecgl.common.ssaoMap.header\n\n@import ecgl.common.bumpMap.header\n\n@import clay.util.srgb\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import clay.plugin.compute_shadow_map\n\nuniform sampler2D hatch1;\nuniform sampler2D hatch2;\nuniform sampler2D hatch3;\nuniform sampler2D hatch4;\nuniform sampler2D hatch5;\nuniform sampler2D hatch6;\n\nfloat shade(in float tone) {\n vec4 c = vec4(1. ,1., 1., 1.);\n float step = 1. / 6.;\n vec2 uv = v_DetailTexcoord;\n if (tone <= step / 2.0) {\n c = mix(vec4(0.), texture2D(hatch6, uv), 12. * tone);\n }\n else if (tone <= step) {\n c = mix(texture2D(hatch6, uv), texture2D(hatch5, uv), 6. * tone);\n }\n if(tone > step && tone <= 2. * step){\n c = mix(texture2D(hatch5, uv), texture2D(hatch4, uv) , 6. * (tone - step));\n }\n if(tone > 2. * step && tone <= 3. * step){\n c = mix(texture2D(hatch4, uv), texture2D(hatch3, uv), 6. * (tone - 2. * step));\n }\n if(tone > 3. * step && tone <= 4. * step){\n c = mix(texture2D(hatch3, uv), texture2D(hatch2, uv), 6. * (tone - 3. * step));\n }\n if(tone > 4. * step && tone <= 5. * step){\n c = mix(texture2D(hatch2, uv), texture2D(hatch1, uv), 6. * (tone - 4. * step));\n }\n if(tone > 5. * step){\n c = mix(texture2D(hatch1, uv), vec4(1.), 6. * (tone - 5. * step));\n }\n\n return c.r;\n}\n\nconst vec3 w = vec3(0.2125, 0.7154, 0.0721);\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n vec4 inkColor = sRGBToLinear(color);\n#else\n vec4 inkColor = color;\n#endif\n\n#ifdef VERTEX_COLOR\n #ifdef SRGB_DECODE\n inkColor *= sRGBToLinear(v_Color);\n #else\n inkColor *= v_Color;\n #endif\n#endif\n\n vec3 N = v_Normal;\n#ifdef DOUBLE_SIDED\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(eyePos - v_WorldPosition);\n\n if (dot(N, V) < 0.0) {\n N = -N;\n }\n#endif\n\n float tone = 0.0;\n\n float ambientFactor = 1.0;\n\n#ifdef BUMPMAP_ENABLED\n N = bumpNormal(v_WorldPosition, v_Normal, N);\n ambientFactor = dot(v_Normal, N);\n#endif\n\n vec3 N2 = vec3(N.x, N[NORMAL_UP_AXIS], N[NORMAL_FRONT_AXIS]);\n\n @import ecgl.common.ssaoMap.main\n\n#ifdef AMBIENT_LIGHT_COUNT\n for(int i = 0; i < AMBIENT_LIGHT_COUNT; i++)\n {\n tone += dot(ambientLightColor[i], w) * ambientFactor * ao;\n }\n#endif\n#ifdef AMBIENT_SH_LIGHT_COUNT\n for(int _idx_ = 0; _idx_ < AMBIENT_SH_LIGHT_COUNT; _idx_++)\n {{\n tone += dot(calcAmbientSHLight(_idx_, N2) * ambientSHLightColor[_idx_], w) * ao;\n }}\n#endif\n#ifdef DIRECTIONAL_LIGHT_COUNT\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n float shadowContribsDir[DIRECTIONAL_LIGHT_COUNT];\n if(shadowEnabled)\n {\n computeShadowOfDirectionalLights(v_WorldPosition, shadowContribsDir);\n }\n#endif\n for(int i = 0; i < DIRECTIONAL_LIGHT_COUNT; i++)\n {\n vec3 lightDirection = -directionalLightDirection[i];\n float lightTone = dot(directionalLightColor[i], w);\n\n float shadowContrib = 1.0;\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n if (shadowEnabled)\n {\n shadowContrib = shadowContribsDir[i];\n }\n#endif\n\n float ndl = dot(N, normalize(lightDirection)) * shadowContrib;\n\n tone += lightTone * clamp(ndl, 0.0, 1.0);\n }\n#endif\n\n gl_FragColor = mix(inkColor, paperColor, shade(clamp(tone, 0.0, 1.0)));\n }\n@end\n",ee="@export ecgl.sm.depth.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nattribute vec3 position : POSITION;\nattribute vec2 texcoord : TEXCOORD_0;\n\n#ifdef VERTEX_ANIMATION\nattribute vec3 prevPosition;\nuniform float percent : 1.0;\n#endif\n\nvarying vec4 v_ViewPosition;\nvarying vec2 v_Texcoord;\n\nvoid main(){\n\n#ifdef VERTEX_ANIMATION\n vec3 pos = mix(prevPosition, position, percent);\n#else\n vec3 pos = position;\n#endif\n\n v_ViewPosition = worldViewProjection * vec4(pos, 1.0);\n gl_Position = v_ViewPosition;\n\n v_Texcoord = texcoord;\n\n}\n@end\n\n\n\n@export ecgl.sm.depth.fragment\n\n@import clay.sm.depth.fragment\n\n@end";function te(e){return!e||"none"===e}function ne(e){return e instanceof HTMLCanvasElement||e instanceof HTMLImageElement||e instanceof Image}function ie(e){return e.getZr&&e.setOption}Object.assign(c.A.prototype,Z),s.A.import(X.A),s.A.import(Y.A),s.A.import(Q),s.A.import(q),s.A.import(K),s.A.import(J),s.A.import($),s.A.import(ee);var re=f.A.prototype.addToScene,oe=f.A.prototype.removeFromScene;f.A.prototype.addToScene=function(e){if(re.call(this,e),this.__zr){var t=this.__zr;e.traverse((function(e){e.__zr=t,e.addAnimatorsToZr&&e.addAnimatorsToZr(t)}))}},f.A.prototype.removeFromScene=function(e){oe.call(this,e),e.traverse((function(e){var t=e.__zr;e.__zr=null,t&&e.removeAnimatorsFromZr&&e.removeAnimatorsFromZr(t)}))},l.A.prototype.setTextureImage=function(e,t,n,i){if(this.shader){var r,o=n.getZr(),a=this;return a.autoUpdateTextureStatus=!1,a.disableTexture(e),te(t)||(r=ae.loadTexture(t,n,i,(function(t){a.enableTexture(e),o&&o.refresh()})),a.set(e,r)),r}};var ae={};ae.Renderer=r.A,ae.Node=c.A,ae.Mesh=i.A,ae.Shader=s.A,ae.Material=l.A,ae.Texture=a.A,ae.Texture2D=o.A,ae.Geometry=u.A,ae.SphereGeometry=N.A,ae.PlaneGeometry=C.A,ae.CubeGeometry=S.A,ae.AmbientLight=E.A,ae.DirectionalLight=O.A,ae.PointLight=P.A,ae.SpotLight=L.A,ae.PerspectiveCamera=D.A,ae.OrthographicCamera=M.A,ae.Vector2=_.A,ae.Vector3=p.A,ae.Vector4=R.A,ae.Quaternion=I.A,ae.Matrix2=z.A,ae.Matrix2d=F.A,ae.Matrix3=U.A,ae.Matrix4=B.A,ae.Plane=H.A,ae.Ray=V.A,ae.BoundingBox=G.A,ae.Frustum=k.A;var se=null;function le(){return null!==se||(se=m.A.createBlank("rgba(255,255,255,0)").image),se}function ce(e){return Math.pow(2,Math.round(Math.log(e)/Math.LN2))}function ue(e){if((e.wrapS===a.A.REPEAT||e.wrapT===a.A.REPEAT)&&e.image){var t=ce(e.width),n=ce(e.height);if(t!==e.width||n!==e.height){var i=document.createElement("canvas");i.width=t,i.height=n;var r=i.getContext("2d");r.drawImage(e.image,0,0,t,n),e.image=i}}}ae.loadTexture=function(e,t,n,i){"function"===typeof n&&(i=n,n={}),n=n||{};for(var r=Object.keys(n).sort(),o="",a=0;a<r.length;a++)o+=r[a]+"_"+n[r[a]]+"_";var s=t.__textureCache=t.__textureCache||new d.Ay(20);if(ie(e)){var l=e.__textureid__,c=s.get(o+l);if(c)c.texture.surface.setECharts(e),i&&i(c.texture);else{var u=new A(e);u.onupdate=function(){t.getZr().refresh()},c={texture:u.getTexture()};for(a=0;a<r.length;a++)c.texture[r[a]]=n[r[a]];l=e.__textureid__||"__ecgl_ec__"+c.texture.__uid__,e.__textureid__=l,s.put(o+l,c),i&&i(c.texture)}return c.texture}if(ne(e)){l=e.__textureid__,c=s.get(o+l);if(!c){c={texture:new ae.Texture2D({image:e})};for(a=0;a<r.length;a++)c.texture[r[a]]=n[r[a]];l=e.__textureid__||"__ecgl_image__"+c.texture.__uid__,e.__textureid__=l,s.put(o+l,c),ue(c.texture),i&&i(c.texture)}return c.texture}c=s.get(o+e);if(c)c.callbacks?c.callbacks.push(i):i&&i(c.texture);else if(e.match(/.hdr$|^data:application\/octet-stream/)){c={callbacks:[i]};var h=m.A.loadTexture(e,{exposure:n.exposure,fileType:"hdr"},(function(){h.dirty(),c.callbacks.forEach((function(e){e&&e(h)})),c.callbacks=null}));c.texture=h,s.put(o+e,c)}else{for(h=new ae.Texture2D({image:new Image}),a=0;a<r.length;a++)h[r[a]]=n[r[a]];c={texture:h,callbacks:[i]};var f=h.image;f.onload=function(){h.image=f,ue(h),h.dirty(),c.callbacks.forEach((function(e){e&&e(h)})),c.callbacks=null},f.crossOrigin="Anonymous",f.src=e,h.image=le(),s.put(o+e,c)}return c.texture},ae.createAmbientCubemap=function(e,t,n,i){e=e||{};var r=e.texture,o=w.A.firstNotNull(e.exposure,1),a=new T.A({intensity:w.A.firstNotNull(e.specularIntensity,1)}),s=new y.A({intensity:w.A.firstNotNull(e.diffuseIntensity,1),coefficients:[.844,.712,.691,-.037,.083,.167,.343,.288,.299,-.041,-.021,-.009,-.003,-.041,-.064,-.011,-.007,-.004,-.031,.034,.081,-.06,-.049,-.06,.046,.056,.05]});return a.cubemap=ae.loadTexture(r,n,{exposure:o},(function(){a.cubemap.flipY=!1,a.prefilter(t,32),s.coefficients=b.A.projectEnvironmentMap(t,a.cubemap,{lod:1}),i&&i()})),{specular:a,diffuse:s}},ae.createBlankTexture=m.A.createBlank,ae.isImage=ne,ae.additiveBlend=function(e){e.blendEquation(e.FUNC_ADD),e.blendFunc(e.SRC_ALPHA,e.ONE)},ae.parseColor=function(e,t){return e instanceof Array?(t||(t=[]),t[0]=e[0],t[1]=e[1],t[2]=e[2],e.length>3?t[3]=e[3]:t[3]=1,t):(t=h.yW.parse(e||"#000",t)||[0,0,0,0],t[0]/=255,t[1]/=255,t[2]/=255,t)},ae.directionFromAlphaBeta=function(e,t){var n=e/180*Math.PI+Math.PI/2,i=-t/180*Math.PI+Math.PI/2,r=[],o=Math.sin(n);return r[0]=o*Math.cos(i),r[1]=-Math.cos(n),r[2]=o*Math.sin(i),r},ae.getShadowResolution=function(e){var t=1024;switch(e){case"low":t=512;break;case"medium":break;case"high":t=2048;break;case"ultra":t=4096;break}return t},ae.COMMON_SHADERS=["lambert","color","realistic","hatching","shadow"],ae.createShader=function(e){"ecgl.shadow"===e&&(e="ecgl.displayShadow");var t=s.A.source(e+".vertex"),n=s.A.source(e+".fragment");t||console.error("Vertex shader of '%s' not exits",e),n||console.error("Fragment shader of '%s' not exits",e);var i=new s.A(t,n);return i.name=e,i},ae.createMaterial=function(e,t){t instanceof Array||(t=[t]);var n=ae.createShader(e),i=new l.A({shader:n});return t.forEach((function(e){"string"===typeof e&&i.define(e)})),i},ae.setMaterialFromModel=function(e,t,n,i){t.autoUpdateTextureStatus=!1;var r=n.getModel(e+"Material"),o=r.get("detailTexture"),a=w.A.firstNotNull(r.get("textureTiling"),1),s=w.A.firstNotNull(r.get("textureOffset"),0);"number"===typeof a&&(a=[a,a]),"number"===typeof s&&(s=[s,s]);var l=a[0]>1||a[1]>1?ae.Texture.REPEAT:ae.Texture.CLAMP_TO_EDGE,c={anisotropic:8,wrapS:l,wrapT:l};if("realistic"===e){var u=r.get("roughness"),h=r.get("metalness");null!=h?isNaN(h)&&(t.setTextureImage("metalnessMap",h,i,c),h=w.A.firstNotNull(r.get("metalnessAdjust"),.5)):h=0,null!=u?isNaN(u)&&(t.setTextureImage("roughnessMap",u,i,c),u=w.A.firstNotNull(r.get("roughnessAdjust"),.5)):u=.5;var f=r.get("normalTexture");t.setTextureImage("detailMap",o,i,c),t.setTextureImage("normalMap",f,i,c),t.set({roughness:u,metalness:h,detailUvRepeat:a,detailUvOffset:s})}else if("lambert"===e)t.setTextureImage("detailMap",o,i,c),t.set({detailUvRepeat:a,detailUvOffset:s});else if("color"===e)t.setTextureImage("detailMap",o,i,c),t.set({detailUvRepeat:a,detailUvOffset:s});else if("hatching"===e){var d=r.get("hatchingTextures")||[];d.length;for(var m=0;m<6;m++)t.setTextureImage("hatch"+(m+1),d[m],i,{anisotropic:8,wrapS:ae.Texture.REPEAT,wrapT:ae.Texture.REPEAT});t.set({detailUvRepeat:a,detailUvOffset:s})}},ae.updateVertexAnimation=function(e,t,n,i){var r=i.get("animation"),o=i.get("animationDurationUpdate"),a=i.get("animationEasingUpdate"),s=n.shadowDepthMaterial;if(r&&t&&o>0&&t.geometry.vertexCount===n.geometry.vertexCount){n.material.define("vertex","VERTEX_ANIMATION"),n.ignorePreZ=!0,s&&s.define("vertex","VERTEX_ANIMATION");for(var l=0;l<e.length;l++)n.geometry.attributes[e[l][0]].value=t.geometry.attributes[e[l][1]].value;n.geometry.dirty(),n.__percent=0,n.material.set("percent",0),n.stopAnimation(),n.animate().when(o,{__percent:1}).during((function(){n.material.set("percent",n.__percent),s&&s.set("percent",n.__percent)})).done((function(){n.ignorePreZ=!1,n.material.undefine("vertex","VERTEX_ANIMATION"),s&&s.undefine("vertex","VERTEX_ANIMATION")})).start(a)}else n.material.undefine("vertex","VERTEX_ANIMATION"),s&&s.undefine("vertex","VERTEX_ANIMATION")};var he=ae},14529:function(e,t,n){n.d(t,{A:function(){return h}});var i=n(9489),r=(n(16573),n(78100),n(77936),n(37467),n(44732),n(79577),n(85811)),o=n(21788),a=n(60911),s=[0,1,2,0,2,3],l=o.A.extend((function(){return{attributes:{position:new o.A.Attribute("position","float",3,"POSITION"),texcoord:new o.A.Attribute("texcoord","float",2,"TEXCOORD_0"),offset:new o.A.Attribute("offset","float",2),color:new o.A.Attribute("color","float",4,"COLOR")}}}),{resetOffset:function(){this._vertexOffset=0,this._faceOffset=0},setSpriteCount:function(e){this._spriteCount=e;var t=4*e,n=2*e;this.vertexCount!==t&&(this.attributes.position.init(t),this.attributes.offset.init(t),this.attributes.color.init(t)),this.triangleCount!==n&&(this.indices=t>65535?new Uint32Array(3*n):new Uint16Array(3*n))},setSpriteAlign:function(e,t,n,i,r){var o,a,s,l;switch(null==n&&(n="left"),null==i&&(i="top"),r=r||0,n){case"left":o=r,s=t[0]+r;break;case"center":case"middle":o=-t[0]/2,s=t[0]/2;break;case"right":o=-t[0]-r,s=-r;break}switch(i){case"bottom":a=r,l=t[1]+r;break;case"middle":a=-t[1]/2,l=t[1]/2;break;case"top":a=-t[1]-r,l=-r;break}var c=4*e,u=this.attributes.offset;u.set(c,[o,l]),u.set(c+1,[s,l]),u.set(c+2,[s,a]),u.set(c+3,[o,a])},addSprite:function(e,t,n,i,r,o){var a=this._vertexOffset;this.setSprite(this._vertexOffset/4,e,t,n,i,r,o);for(var l=0;l<s.length;l++)this.indices[3*this._faceOffset+l]=s[l]+a;return this._faceOffset+=2,this._vertexOffset+=4,a/4},setSprite:function(e,t,n,i,r,o,a){for(var s=4*e,l=this.attributes,c=0;c<4;c++)l.position.set(s+c,t);var u=l.texcoord;u.set(s,[i[0][0],i[0][1]]),u.set(s+1,[i[1][0],i[0][1]]),u.set(s+2,[i[1][0],i[1][1]]),u.set(s+3,[i[0][0],i[1][1]]),this.setSpriteAlign(e,n,r,o,a)}});r.ZS.defaults(l.prototype,a.A);var c=l,u="@export ecgl.labels.vertex\n\nattribute vec3 position: POSITION;\nattribute vec2 texcoord: TEXCOORD_0;\nattribute vec2 offset;\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform vec4 viewport : VIEWPORT;\n\nvarying vec2 v_Texcoord;\n\nvoid main()\n{\n vec4 proj = worldViewProjection * vec4(position, 1.0);\n\n vec2 screen = (proj.xy / abs(proj.w) + 1.0) * 0.5 * viewport.zw;\n\n screen += offset;\n\n proj.xy = (screen / viewport.zw - 0.5) * 2.0 * abs(proj.w);\n gl_Position = proj;\n#ifdef VERTEX_COLOR\n v_Color = a_Color;\n#endif\n v_Texcoord = texcoord;\n}\n@end\n\n\n@export ecgl.labels.fragment\n\nuniform vec3 color : [1.0, 1.0, 1.0];\nuniform float alpha : 1.0;\nuniform sampler2D textureAtlas;\nuniform vec2 uvScale: [1.0, 1.0];\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\nvarying float v_Miter;\n\nvarying vec2 v_Texcoord;\n\nvoid main()\n{\n gl_FragColor = vec4(color, alpha) * texture2D(textureAtlas, v_Texcoord * uvScale);\n#ifdef VERTEX_COLOR\n gl_FragColor *= v_Color;\n#endif\n}\n\n@end";i.A.Shader.import(u);var h=i.A.Mesh.extend((function(){var e=new c({dynamic:!0}),t=new i.A.Material({shader:i.A.createShader("ecgl.labels"),transparent:!0,depthMask:!1});return{geometry:e,material:t,culling:!1,castShadow:!1,ignorePicking:!0}}))},69665:function(e,t,n){var i=n(85811),r={firstNotNull:function(){for(var e=0,t=arguments.length;e<t;e++)if(null!=arguments[e])return arguments[e]},queryDataIndex:function(e,t){return null!=t.dataIndexInside?t.dataIndexInside:null!=t.dataIndex?i.ZS.isArray(t.dataIndex)?i.ZS.map(t.dataIndex,(function(t){return e.indexOfRawIndex(t)})):e.indexOfRawIndex(t.dataIndex):null!=t.name?i.ZS.isArray(t.name)?i.ZS.map(t.name,(function(t){return e.indexOfName(t)})):e.indexOfName(t.name):void 0}};t.A=r},94643:function(e,t){t.A="\n@export ecgl.displayShadow.vertex\n\n@import ecgl.common.transformUniforms\n\n@import ecgl.common.uv.header\n\n@import ecgl.common.attributes\n\nvarying vec3 v_WorldPosition;\n\nvarying vec3 v_Normal;\n\nvoid main()\n{\n @import ecgl.common.uv.main\n v_Normal = normalize((worldInverseTranspose * vec4(normal, 0.0)).xyz);\n\n v_WorldPosition = (world * vec4(position, 1.0)).xyz;\n gl_Position = worldViewProjection * vec4(position, 1.0);\n}\n\n@end\n\n\n@export ecgl.displayShadow.fragment\n\n@import ecgl.common.uv.fragmentHeader\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nuniform float roughness: 0.2;\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n@import clay.header.directional_light\n#endif\n\n@import ecgl.common.ssaoMap.header\n\n@import clay.plugin.compute_shadow_map\n\nvoid main()\n{\n float shadow = 1.0;\n\n @import ecgl.common.ssaoMap.main\n\n#if defined(DIRECTIONAL_LIGHT_COUNT) && defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n float shadowContribsDir[DIRECTIONAL_LIGHT_COUNT];\n if(shadowEnabled)\n {\n computeShadowOfDirectionalLights(v_WorldPosition, shadowContribsDir);\n }\n for (int i = 0; i < DIRECTIONAL_LIGHT_COUNT; i++) {\n shadow = min(shadow, shadowContribsDir[i] * 0.5 + 0.5);\n }\n#endif\n\n shadow *= 0.5 + ao * 0.5;\n shadow = clamp(shadow, 0.0, 1.0);\n\n gl_FragColor = vec4(vec3(0.0), 1.0 - shadow);\n}\n\n@end"},34486:function(e,t){t.A="@export ecgl.lines2D.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nattribute vec2 position: POSITION;\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n\n#ifdef POSITIONTEXTURE_ENABLED\nuniform sampler2D positionTexture;\n#endif\n\nvoid main()\n{\n gl_Position = worldViewProjection * vec4(position, -10.0, 1.0);\n\n v_Color = a_Color;\n}\n\n@end\n\n@export ecgl.lines2D.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nvarying vec4 v_Color;\n\nvoid main()\n{\n gl_FragColor = color * v_Color;\n}\n@end\n\n\n@export ecgl.meshLines2D.vertex\n\nattribute vec2 position: POSITION;\nattribute vec2 normal;\nattribute float offset;\nattribute vec4 a_Color : COLOR;\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform vec4 viewport : VIEWPORT;\n\nvarying vec4 v_Color;\nvarying float v_Miter;\n\nvoid main()\n{\n vec4 p2 = worldViewProjection * vec4(position + normal, -10.0, 1.0);\n gl_Position = worldViewProjection * vec4(position, -10.0, 1.0);\n\n p2.xy /= p2.w;\n gl_Position.xy /= gl_Position.w;\n\n vec2 N = normalize(p2.xy - gl_Position.xy);\n gl_Position.xy += N * offset / viewport.zw * 2.0;\n\n gl_Position.xy *= gl_Position.w;\n\n v_Color = a_Color;\n}\n@end\n\n\n@export ecgl.meshLines2D.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nvarying vec4 v_Color;\nvarying float v_Miter;\n\nvoid main()\n{\n gl_FragColor = color * v_Color;\n}\n\n@end"},74133:function(e,t){t.A="@export ecgl.lines3D.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nattribute vec3 position: POSITION;\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n\nvoid main()\n{\n gl_Position = worldViewProjection * vec4(position, 1.0);\n v_Color = a_Color;\n}\n\n@end\n\n@export ecgl.lines3D.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nvarying vec4 v_Color;\n\n@import clay.util.srgb\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n gl_FragColor = sRGBToLinear(color * v_Color);\n#else\n gl_FragColor = color * v_Color;\n#endif\n}\n@end\n\n\n\n@export ecgl.lines3D.clipNear\n\nvec4 clipNear(vec4 p1, vec4 p2) {\n float n = (p1.w - near) / (p1.w - p2.w);\n return vec4(mix(p1.xy, p2.xy, n), -near, near);\n}\n\n@end\n\n@export ecgl.lines3D.expandLine\n#ifdef VERTEX_ANIMATION\n vec4 prevProj = worldViewProjection * vec4(mix(prevPositionPrev, positionPrev, percent), 1.0);\n vec4 currProj = worldViewProjection * vec4(mix(prevPosition, position, percent), 1.0);\n vec4 nextProj = worldViewProjection * vec4(mix(prevPositionNext, positionNext, percent), 1.0);\n#else\n vec4 prevProj = worldViewProjection * vec4(positionPrev, 1.0);\n vec4 currProj = worldViewProjection * vec4(position, 1.0);\n vec4 nextProj = worldViewProjection * vec4(positionNext, 1.0);\n#endif\n\n if (currProj.w < 0.0) {\n if (nextProj.w > 0.0) {\n currProj = clipNear(currProj, nextProj);\n }\n else if (prevProj.w > 0.0) {\n currProj = clipNear(currProj, prevProj);\n }\n }\n\n vec2 prevScreen = (prevProj.xy / abs(prevProj.w) + 1.0) * 0.5 * viewport.zw;\n vec2 currScreen = (currProj.xy / abs(currProj.w) + 1.0) * 0.5 * viewport.zw;\n vec2 nextScreen = (nextProj.xy / abs(nextProj.w) + 1.0) * 0.5 * viewport.zw;\n\n vec2 dir;\n float len = offset;\n if (position == positionPrev) {\n dir = normalize(nextScreen - currScreen);\n }\n else if (position == positionNext) {\n dir = normalize(currScreen - prevScreen);\n }\n else {\n vec2 dirA = normalize(currScreen - prevScreen);\n vec2 dirB = normalize(nextScreen - currScreen);\n\n vec2 tanget = normalize(dirA + dirB);\n\n float miter = 1.0 / max(dot(tanget, dirA), 0.5);\n len *= miter;\n dir = tanget;\n }\n\n dir = vec2(-dir.y, dir.x) * len;\n currScreen += dir;\n\n currProj.xy = (currScreen / viewport.zw - 0.5) * 2.0 * abs(currProj.w);\n@end\n\n\n@export ecgl.meshLines3D.vertex\n\nattribute vec3 position: POSITION;\nattribute vec3 positionPrev;\nattribute vec3 positionNext;\nattribute float offset;\nattribute vec4 a_Color : COLOR;\n\n#ifdef VERTEX_ANIMATION\nattribute vec3 prevPosition;\nattribute vec3 prevPositionPrev;\nattribute vec3 prevPositionNext;\nuniform float percent : 1.0;\n#endif\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform vec4 viewport : VIEWPORT;\nuniform float near : NEAR;\n\nvarying vec4 v_Color;\n\n@import ecgl.common.wireframe.vertexHeader\n\n@import ecgl.lines3D.clipNear\n\nvoid main()\n{\n @import ecgl.lines3D.expandLine\n\n gl_Position = currProj;\n\n v_Color = a_Color;\n\n @import ecgl.common.wireframe.vertexMain\n}\n@end\n\n\n@export ecgl.meshLines3D.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nvarying vec4 v_Color;\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import clay.util.srgb\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n gl_FragColor = sRGBToLinear(color * v_Color);\n#else\n gl_FragColor = color * v_Color;\n#endif\n\n @import ecgl.common.wireframe.fragmentMain\n}\n\n@end"},65532:function(e,t,n){var i=n(85811);function r(e,t,n){t=t||document.createElement("canvas");t.width=e,t.height=e;var i=t.getContext("2d");return n&&n(i),t}function o(e,t,n,r){i.ZS.isArray(t)||(t=[t,t]);var o=s.getMarginByStyle(n,r),a=t[0]+o.left+o.right,l=t[1]+o.top+o.bottom,c=i.dw.createSymbol(e,0,0,t[0],t[1]),u=Math.max(a,l);c.x=o.left,c.y=o.top,a>l?c.y+=(u-l)/2:c.x+=(u-a)/2;var h=c.getBoundingRect();return c.x-=h.x,c.y-=h.y,c.setStyle(n),c.update(),c.__size=u,c}function a(e,t,n){var i=t.width,r=t.height,o=e.canvas.width,a=e.canvas.height,s=i/o,l=r/a;function c(e){return e<128?1:-1}function u(e,o){var a=1/0;e=Math.floor(e*s),o=Math.floor(o*l);for(var u=o*i+e,h=t.data[4*u],f=c(h),d=Math.max(o-n,0);d<Math.min(o+n,r);d++)for(var m=Math.max(e-n,0);m<Math.min(e+n,i);m++){u=d*i+m;var p=t.data[4*u],_=c(p),v=m-e,g=d-o;if(f!==_){var x=v*v+g*g;x<a&&(a=x)}}return f*Math.sqrt(a)}for(var h=e.createImageData(o,a),f=0;f<a;f++)for(var d=0;d<o;d++){var m=u(d,f),p=m/n*.5+.5,_=4*(f*o+d);h.data[_++]=255*(1-p),h.data[_++]=255*(1-p),h.data[_++]=255*(1-p),h.data[_++]=255}return h}var s={getMarginByStyle:function(e){var t=e.minMargin||0,n=0;e.stroke&&"none"!==e.stroke&&(n=null==e.lineWidth?1:e.lineWidth);var i=e.shadowBlur||0,r=e.shadowOffsetX||0,o=e.shadowOffsetY||0,a={};return a.left=Math.max(n/2,-r+i,t),a.right=Math.max(n/2,r+i,t),a.top=Math.max(n/2,-o+i,t),a.bottom=Math.max(n/2,o+i,t),a},createSymbolSprite:function(e,t,n,a){var l=o(e,t,n),c=s.getMarginByStyle(n);return{image:r(l.__size,a,(function(e){i.UU(e,l)})),margin:c}},createSDFFromCanvas:function(e,t,n,i){return r(t,i,(function(t){var i=e.getContext("2d"),r=i.getImageData(0,0,e.width,e.height);t.putImageData(a(t,r,n),0,0)}))},createSimpleSprite:function(e,t){return r(e,t,(function(t){var n=e/2;t.beginPath(),t.arc(n,n,60,0,2*Math.PI,!1),t.closePath();var i=t.createRadialGradient(n,n,0,n,n,n);i.addColorStop(0,"rgba(255, 255, 255, 1)"),i.addColorStop(.5,"rgba(255, 255, 255, 0.5)"),i.addColorStop(1,"rgba(255, 255, 255, 0)"),t.fillStyle=i,t.fill()}))}};t.A=s},42886:function(e,t){var n=Math.PI,i=Math.sin,r=Math.cos,o=Math.tan,a=Math.asin,s=Math.atan2,l=n/180,c=864e5,u=2440588,h=2451545;function f(e){return e.valueOf()/c-.5+u}function d(e){return f(e)-h}var m=23.4397*l;function p(e,t){return s(i(e)*r(m)-o(t)*i(m),r(e))}function _(e,t){return a(i(t)*r(m)+r(t)*i(m)*i(e))}function v(e,t,n){return s(i(e),r(e)*i(t)-o(n)*r(t))}function g(e,t,n){return a(i(t)*i(n)+r(t)*r(n)*r(e))}function x(e,t){return l*(280.16+360.9856235*e)-t}function A(e){return l*(357.5291+.98560028*e)}function T(e){var t=l*(1.9148*i(e)+.02*i(2*e)+3e-4*i(3*e)),r=102.9372*l;return e+t+r+n}function y(e){var t=A(e),n=T(t);return{dec:_(n,0),ra:p(n,0)}}var b={getPosition:function(e,t,n){var i=l*-n,r=l*t,o=d(e),a=y(o),s=x(o,i)-a.ra;return{azimuth:v(s,r,a.dec),altitude:g(s,r,a.dec)}}};t.A=b},46685:function(e,t,n){function i(e){const t=e.getVisual("style");if(t){const n=e.getVisual("drawType");return t[n]}}function r(e){const t=e.getVisual("style");return t.opacity}function o(e,t){const n=e.getItemVisual(t,"style");if(n){const t=e.getVisual("drawType");return n[t]}}function a(e,t){const n=e.getItemVisual(t,"style");return n&&n.opacity}n.d(t,{DQ:function(){return o},fz:function(){return a},iu:function(){return r},yz:function(){return i}})},91557:function(e,t,n){n.d(t,{Ts:function(){return r.Ts},fA:function(){return r.fA},kB:function(){return r.kB},mz:function(){return r.mz}});var i=n(22212),r=n(29400),o=n(81493),a=n(43133),s=n(39922),l=n(10289),c=n(36241),u=n(58615),h=n(11538),f=n(88170),d=n(95253),m=n(12823),p=n(31023),_=n(53290),v=n(31323),g=n(47443),x=n(58965),A=n(71272),T=n(4727),y=n(73934),b=n(54488),w=n(80395),N=n(63575),C=n(27183),S=n(39191),E=n(28084),O=n(38885),P=n(60149),L=n(42115),D=n(75948),M=n(92763),R=n(55191),I=n(62906),z=n(57051),F=n(89536),U=n(25302),B=n(56283),H=n(40623),V=n(36380),G=n(44582),k=n(73053),j=n(25363),W=n(74016),Z=n(78622),X=n(73576),Y=n(68646),Q=n(89635),q=n(26573),K=n(12102),J=n(7126),$=n(86790),ee=n(17917),te=n(63593),ne=n(18915);(0,i.Y)([o.a]),(0,i.Y)([a.a]),(0,i.Y)([s.a,l.a,c.a,u.a,h.a,f.a,d.a,m.a,p.a,_.a,v.a,g.a,x.a,A.a,T.a,y.a,b.a,w.a,N.a,C.a,S.a,E.a]),(0,i.Y)(O.a),(0,i.Y)(P.a),(0,i.Y)(L.a),(0,i.Y)(D.a),(0,i.Y)(M.a),(0,i.Y)(R.a),(0,i.Y)(I.a),(0,i.Y)(z.a),(0,i.Y)(F.a),(0,i.Y)(U.a),(0,i.Y)(B.a),(0,i.Y)(H.a),(0,i.Y)(V.a),(0,i.Y)(G.a),(0,i.Y)(k.a),(0,i.Y)(j.a),(0,i.Y)(W.a),(0,i.Y)(Z.a),(0,i.Y)(X.a),(0,i.Y)(Y.a),(0,i.Y)(Q.a),(0,i.Y)(q.a),(0,i.Y)(K.a),(0,i.Y)(J.a),(0,i.Y)($.a),(0,i.Y)(ee.a),(0,i.Y)(te.i),(0,i.Y)(ne._)}}]);
//# sourceMappingURL=chunk-vendors-8b67eea0.1a1c7336.js.map